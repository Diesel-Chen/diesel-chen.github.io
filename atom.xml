<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DieselChen</title>
  
  <subtitle>个人博客,记录一下学习的点滴～</subtitle>
  <link href="https://www.dieselchen.work/atom.xml" rel="self"/>
  
  <link href="https://www.dieselchen.work/"/>
  <updated>2022-08-05T09:41:41.000Z</updated>
  <id>https://www.dieselchen.work/</id>
  
  <author>
    <name>Diesel-Chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>近期关于图像相关的技术选型及总结</title>
    <link href="https://www.dieselchen.work/archives/71bcff18.html"/>
    <id>https://www.dieselchen.work/archives/71bcff18.html</id>
    <published>2022-08-05T09:41:41.000Z</published>
    <updated>2022-08-05T09:41:41.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>近期有相关业务需要自适应抠图，在了解到阿里云有相关api后 进行了对接。总结一下踩的坑～</p></blockquote><span id="more"></span><h3 id="阿里云视觉智能开放平台"><a href="#阿里云视觉智能开放平台" class="headerlink" title="阿里云视觉智能开放平台"></a>阿里云视觉智能开放平台</h3><p>阿里云视觉智能开放平台将围绕多个视觉领域，例如：通用、图像、视频、目标识别以及3D、AR/VR等类目，不断的为您提供多种视觉AI能力。具体方向包括：</p><ul><li>人脸人体</li><li>文字识别</li><li>商品理解</li><li>内容审核</li><li>图像识别</li><li>分割抠图</li><li>图像生产</li><li>视觉搜索</li><li>视频理解</li><li>视频分割</li><li>视频生产</li><li>视频搜索</li><li>目标检测</li><li>3D 视觉</li><li>AR/VR</li></ul><p>​    之前用阿里云这个平台做个文字识别感觉还是很不错的。api的对接以及文档规范程度都不错。按流量收费性价比也很高。这一次的新业务也用到了自适应抠图。正好阿里云平台提供了分割抠图</p><h3 id="人体分割"><a href="#人体分割" class="headerlink" title="人体分割"></a>人体分割</h3><h4 id="输入限制"><a href="#输入限制" class="headerlink" title="输入限制"></a>输入限制</h4><ul><li>图像格式：JPEG、JPG、PNG、BMP。</li><li>图像大小：不超过3 MB。</li><li>图像分辨率：大于32×32像素，小于2000×2000像素。</li><li>URL地址不能包含中文字符。</li></ul><p>​    首先改api在2QPS的时候是免费的。所以我们写demo的时候需要控制一个队列来让其满足2QPS。通过ImageMagick 调用相关go的api cgo完成对一些图像的预处理让其符合规范。而且阿里云处理好的图像底部以及大小位置并不是透明的。位置有坐标信息我们可以通过ImageMagick重新定位这些元素以及让背景透明化</p><p>以下是核心代码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">segBodyRateLimit = time.Tick(time.Second / <span class="number">2</span>)</span><br><span class="line">segBodyReqQueue = <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HandleSegmentBody</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">req  requestBody.SegmentReq</span><br><span class="line">lock sync.Mutex</span><br><span class="line">)</span><br><span class="line">err := c.BindJSON(&amp;req)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logrus.Println(<span class="string">&quot;bind requestBody.SegmentReq failed err:&quot;</span>, err)</span><br><span class="line">handler.ResponseJson(c, <span class="string">&quot;&quot;</span>, errno.BadRequest)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">lock.Lock()</span><br><span class="line">segBodyReqQueue = <span class="built_in">append</span>(segBodyReqQueue, req.Url)</span><br><span class="line">lock.Unlock()</span><br><span class="line">u, err := segmentBody()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">//进行对常见的错误处理</span></span><br><span class="line">ExplainErr(c, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理照片 自适应裁剪</span></span><br><span class="line">localFile, err := imageMagick.TrimImageByUrl(u.Resp.Url)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logrus.Println(<span class="string">&quot;[imageMagick trim err]:&quot;</span>, err.Error())</span><br><span class="line">handler.ResponseJson(c, <span class="string">&quot;自适应处理图片失败&quot;</span>, errno.ErrTrimImageMagickFail)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//图像地址持久化</span></span><br><span class="line">returnUrl, err := handler.UploadToAliyunOssByLocalFile(localFile)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logrus.Println(<span class="string">&quot;[upload err]:&quot;</span>, err.Error())</span><br><span class="line">handler.ResponseJson(c, <span class="string">&quot;上传到阿里云oss失败&quot;</span>, errno.ErrUploadAliOssFail)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">u.Resp.Url = returnUrl</span><br><span class="line"></span><br><span class="line">handler.ResponseJson(c, u, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h3><ul><li>一开始把阿里云处理的结果直接返回给前端，居然发现背景是白色而不是透明的。就自己引入了ImageMagick对图像进行了处理</li><li>ImageMagick配合go的生产环境搭配起来是个坑。我是利用docker-compose 编排的服务。所以在写dockerfile的时候修改了好几个版本，一开始我自己本地mac环境跑的是iamgeMagick 6版本。本地用是没什么问题打，但是在docker环境跑6一直失败，调研之后发现。由于ImageMagick依赖很多第三方的包比如libjpeg-dev libpng-dev libtiff-dev 在ubuntu中和go的兼容性6的版本做的不好，智能用7</li><li>在docker引入ImageMagick的缺点。docker的编排时间由原来的1分钟到现在的4分钟。由于ImageMagick所依赖的依赖包比较多。所以后续针对CI、CD的时间还需要进一步的优化</li></ul><h3 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.14</span> as builder</span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> DEBIAN_FRONTEND noninteractive</span><br><span class="line"><span class="keyword">ENV</span> GO111MODULE on</span><br><span class="line"><span class="keyword">ENV</span> GOPROXY=https://goproxy.cn</span><br><span class="line"><span class="keyword">ENV</span> CGO_ENABLED=<span class="number">1</span></span><br><span class="line"><span class="keyword">ENV</span> CGO_CFLAGS_ALLOW=-Xpreprocessor</span><br><span class="line"><span class="keyword">ENV</span> GIN_MODE release</span><br><span class="line"><span class="keyword">ENV</span> IMAGEMAGICK_VERSION=<span class="number">7.0</span>.<span class="number">8</span>-<span class="number">11</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># install build essentials</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get install -y wget build-essential pkg-config --no-install-recommends</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install ImageMagick deps</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get -q -y install libjpeg-dev libpng-dev libtiff-dev \</span></span><br><span class="line"><span class="bash">    libgif-dev libx11-dev --no-install-recommends</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> go.mod go.sum ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go mod download</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> static/font/tmp &amp;&amp; \</span></span><br><span class="line"><span class="bash">tar xvzf ImageMagick-<span class="variable">$&#123;IMAGEMAGICK_VERSION&#125;</span>.tar.gz &amp;&amp; \</span></span><br><span class="line"><span class="bash"><span class="built_in">cd</span> ImageMagick* &amp;&amp; \</span></span><br><span class="line"><span class="bash">./configure \</span></span><br><span class="line"><span class="bash">    --without-magick-plus-plus \</span></span><br><span class="line"><span class="bash">    --without-perl \</span></span><br><span class="line"><span class="bash">    --disable-openmp \</span></span><br><span class="line"><span class="bash">    --with-gvc=no \</span></span><br><span class="line"><span class="bash">    --disable-docs &amp;&amp; \</span></span><br><span class="line"><span class="bash">make -j$(nproc) &amp;&amp; make install &amp;&amp; \</span></span><br><span class="line"><span class="bash">ldconfig /usr/<span class="built_in">local</span>/lib</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go build -a -installsuffix cgo -o api ./main.go</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;/app/api&quot;</span>]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;近期有相关业务需要自适应抠图，在了解到阿里云有相关api后 进行了对接。总结一下踩的坑～&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="总结" scheme="https://www.dieselchen.work/categories/%E6%80%BB%E7%BB%93/"/>
    
    <category term="ImageMagick" scheme="https://www.dieselchen.work/categories/%E6%80%BB%E7%BB%93/ImageMagick/"/>
    
    
    <category term="总结" scheme="https://www.dieselchen.work/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="ImageMagick" scheme="https://www.dieselchen.work/tags/ImageMagick/"/>
    
  </entry>
  
  <entry>
    <title>go-zero 入门概述篇</title>
    <link href="https://www.dieselchen.work/archives/1180b2c7.html"/>
    <id>https://www.dieselchen.work/archives/1180b2c7.html</id>
    <published>2022-06-11T10:07:05.000Z</published>
    <updated>2022-06-11T10:07:05.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>go-zero 包含极简的 API 定义和生成工具 goctl，可以根据定义的 api 文件一键生成 Go, iOS, Android, Kotlin, Dart, TypeScript, JavaScript 代码，并可直接运行。</p></blockquote><span id="more"></span><h1 id="1、简介："><a href="#1、简介：" class="headerlink" title="1、简介："></a>1、简介：</h1><p>go-zero（收录于 CNCF 云原生技术全景图：<a href="https://landscape.cncf.io/?selected=go-zero%EF%BC%89%E6%98%AF%E4%B8%80%E4%B8%AA%E9%9B%86%E6%88%90%E4%BA%86%E5%90%84%E7%A7%8D%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5%E7%9A%84">https://landscape.cncf.io/?selected=go-zero）是一个集成了各种工程实践的</a> web 和 rpc 框架。通过弹性设计保障了大并发服务端的稳定性，经受了充分的实战检验。</p><p>使用 go-zero 的好处：</p><ul><li>轻松获得支撑千万日活服务的稳定性</li><li>内建级联超时控制、限流、自适应熔断、自适应降载等微服务治理能力，无需配置和额外代码</li><li>微服务治理中间件可无缝集成到其它现有框架使用</li><li>极简的 API 描述，一键生成各端代码</li><li>自动校验客户端请求参数合法性</li><li>大量微服务治理和并发工具包</li></ul><p><a href="https://img2022.cnblogs.com/blog/1774189/202207/1774189-20220723204015843-1205422348.png"><img src="https://img2022.cnblogs.com/blog/1774189/202207/1774189-20220723204015843-1205422348.png" alt="img"></a></p><h1 id="2、特点"><a href="#2、特点" class="headerlink" title="2、特点"></a>2、特点</h1><p>go-zero 是一个集成了各种工程实践的包含 web 和 rpc 框架，有如下主要特点：</p><ul><li>强大的工具支持，尽可能少的代码编写</li><li>极简的接口</li><li>完全兼容 net/http</li><li>支持中间件，方便扩展</li><li>高性能</li><li>面向故障编程，弹性设计</li><li>内建服务发现、负载均衡</li><li>内建限流、熔断、降载，且自动触发，自动恢复</li><li>API 参数自动校验</li><li>超时级联控制</li><li>自动缓存控制</li><li>链路跟踪、统计报警等</li><li>高并发支撑，稳定保障了疫情期间每天的流量洪峰</li></ul><h1 id="3、选择go-zero原因"><a href="#3、选择go-zero原因" class="headerlink" title="3、选择go-zero原因"></a>3、选择go-zero原因</h1><p>go-zero 为提供了许多高并发场景下的实用工具，如：</p><ul><li>为了降低接口耗时往往需要并发的请求依赖的服务，这个时候可以使用 mapreduce 并行的处理请求；</li><li>面对海量请求为了降低Redis压力和提高响应时间，可以使用 collection 构建本地缓存；</li><li>避免用户连续请求造成服务压力可以使用 limit 做用户级别的限流等等。</li></ul><p>好的框架能够给项目开发带来事半功倍的效果，Go-zero的简洁易用性与内置的开箱即用的工具和服务治理能力助力构建一个高并发高可靠的系统。</p><h1 id="4、需求"><a href="#4、需求" class="headerlink" title="4、需求"></a>4、需求</h1><p>为了更加贴近真实的项目开发，项目会基于真实的产品需求进行构建。商城是接触比较多而又比较复杂的系统，所以决定通过构建商城系统来学习如何基于 go-zero 构建高并发系统。实现一个 mvp版本，在mvp版本中把 go-zero 的核心功能和构建高并发商城系统的核心点演示。</p><p>如下思维导图列出了该电商系统主要实现的功能：</p><p><a href="https://img2022.cnblogs.com/blog/1774189/202207/1774189-20220723204049474-678427595.png"><img src="https://img2022.cnblogs.com/blog/1774189/202207/1774189-20220723204049474-678427595.png" alt="img"></a></p><p>从以上思维导图可以看出整个电商系统功能还是比较多的，根据业务职能做如下微服务的划分：</p><ul><li>商品服务(product) - 商品的添加、信息查询、库存管理等功能</li><li>购物车服务(cart) - 购物车的增删改查</li><li>订单服务(order) - 生成订单，订单管理</li><li>支付服务(pay) - 通过调用第三方支付实现支付功能</li><li>账号服务(user) - 用户信息、等级、封禁、地址管理</li><li>推荐服务(recommend) - 首页商品推荐</li><li>评论服务(reply) - 商品的评论功能、评论的回复功能</li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;go-zero 包含极简的 API 定义和生成工具 goctl，可以根据定义的 api 文件一键生成 Go, iOS, Android, Kotlin, Dart, TypeScript, JavaScript 代码，并可直接运行。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Golang" scheme="https://www.dieselchen.work/categories/Golang/"/>
    
    
    <category term="Golang" scheme="https://www.dieselchen.work/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>ImageMagick学习笔记</title>
    <link href="https://www.dieselchen.work/archives/18e82ec3.html"/>
    <id>https://www.dieselchen.work/archives/18e82ec3.html</id>
    <published>2022-05-01T09:18:08.000Z</published>
    <updated>2022-05-01T09:18:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ImageMagick是一个神奇的软件，你可以通过命令行进行对图片你想到的一切操作……</p></blockquote><span id="more"></span><p>在认识ImageMagick之前，我使用的图像浏览软件是KuickShow，截图软件是KSnapShot，这两款软件都是KDE附带的软件，用起来也是蛮方便的。在一次偶然的机会中，我遇到了ImageMagick，才发现Linux竟然有如此功能强大的图像软件。</p><p>你将会发现，大部分的操作，你只要在终端下动动键盘即可，省得你用鼠标点来点去。</p><p>下面，我对ImageMagick的主要功能做一个简单的介绍，其中覆盖的大都是人们常用的一些功能，如果你要全面的了解它的知识，你可以看看它的man手册。</p><h2 id="convert"><a href="#convert" class="headerlink" title="convert"></a>convert</h2><p>convert顾名思义就是对图像进行转化，它主要用来对图像进行格式的转化，同时还可以做缩放、剪切、模糊、反转等操作。</p><ul><li><p>格式转化</p><p>比如把 foo.jpg 转化为 foo.png：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert foo.jpg foo.png</span><br></pre></td></tr></table></figure><p>如果要想把目录下所有的jpg文件都转化为gif，我们可借助于shell的强大功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find .&#x2F; -name &quot;*.jpg&quot; -exec convert &#123;&#125; &#123;&#125;.gif \;</span><br></pre></td></tr></table></figure><p>转化后的gif名称为 *.jpg.gif ，这样看起来不太自然，没关系，我们可以再来一步：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename .jpg.gif .gif *.jpg.gif</span><br></pre></td></tr></table></figure><p>本来，我想在find的时候，用basename来取得不带后缀的文件名的，这样就不会形成.jpg.gif这种丑陋的名子了，可是不知道为什么，就是不行，如果你知道的话，告诉我</p><p>或者，你也可用shell script来完成上述的操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in *.jpg</span><br><span class="line">do</span><br><span class="line">convert $i &#96;basename $i .jpg&#96;.gif</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>我们还可用mogrify来完成同样的效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mogrify -format png *.jpg</span><br></pre></td></tr></table></figure><p>上面命令将会把目录下面所有的jpg文件转化为png格式。</p><p>convert还可以把多张照片转化成pdf格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert *.jpg foo.pdf</span><br></pre></td></tr></table></figure></li><li><p>大小缩放</p><p>比如我们要为一个普通大小的图片做一个缩略图，我们可以这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert -resize 100x100 foo.jpg thumbnail.jpg</span><br></pre></td></tr></table></figure><p>你也可以用百分比，这样显的更为直观：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert -resize 50%x50% foo.jpg thumbnail.jpg</span><br></pre></td></tr></table></figure><p>convert会自动地考虑在缩放图像大小时图像的高宽的比例，也就是说着新的图像的高宽比与原图相同。</p><p>我们还可以批量生成缩略图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mogrify -sample 80x60 *.jpg</span><br></pre></td></tr></table></figure><p>注意，这个命令会覆盖原来的图片，不过你可以在操作前，先把你的图片备份一下。</p></li><li><p>加边框</p><p>在一张照片的四周加上边框，可以用 -mattecolor 参数，比如某位同志牺牲了，我们需要为他做一张黑边框的遗像，可以这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert -mattecolor &quot;#000000&quot; -frame 60x60 yourname.jpg rememberyou.png</span><br></pre></td></tr></table></figure><p>其中，”#000000”是边框的颜色，边框的大小为60x60</p><p>你也可以这样加边框:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert -border 60x60 -bordercolor &quot;#000000&quot; yourname.jpg rememberyou.png</span><br></pre></td></tr></table></figure></li><li><p>在图片上加文字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert -fill green -pointsize 40 -draw &#39;text 10,50 &quot;charry.org&quot;&#39; foo.png bar.png</span><br></pre></td></tr></table></figure><p>上面的命令在距离图片的左上角10x50的位置，用绿色的字写下charry.org，如果你要指定别的字体，可以用-font参数。</p></li><li><p>模糊</p><p>高斯模糊:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert -blur 80 foo.jpg foo.png</span><br></pre></td></tr></table></figure><p>-blur参数还可以这样-blur 80x5。后面的那个5表示的是Sigma的值，这个是图像术语，我也不太清楚，总之，它的值对模糊的效果起关键的作用。</p></li><li><p>翻转</p><p>上下翻转：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert -flip foo.png bar.png</span><br></pre></td></tr></table></figure><p>左右翻转：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert -flop foo.png bar.png</span><br></pre></td></tr></table></figure></li><li><p>反色</p><p>形成底片的样子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert -negate foo.png bar.png</span><br></pre></td></tr></table></figure></li><li><p>单色</p><p>把图片变为黑白颜色：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert -monochrome foo.png bar.png</span><br></pre></td></tr></table></figure></li><li><p>加噪声</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert -noise 3 foo.png bar.png</span><br></pre></td></tr></table></figure></li><li><p>油画效果</p><p>我们可用这个功能，把一张普通的图片，变成一张油画，效果非常的逼真</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert -paint 4 foo.png bar.png</span><br></pre></td></tr></table></figure></li><li><p>旋转</p><p>把一张图片，旋转一定的角度：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert -rotate 30 foo.png bar.png</span><br></pre></td></tr></table></figure><p>上面的30，表示向右旋转30度，如果要向左旋转，度数就是负数。</p></li><li><p>炭笔效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert -charcoal 2 foo.png bar.png</span><br></pre></td></tr></table></figure><p>形成炭笔或者说是铅笔画的效果。</p></li><li><p>散射</p><p>毛玻璃效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert -spread 30 foo.png bar.png</span><br></pre></td></tr></table></figure></li><li><p>漩涡</p><p>以图片的中心作为参照，把图片扭转，形成漩涡的效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert -swirl 67 foo.png bar.png</span><br></pre></td></tr></table></figure></li><li><p>凸起效果</p><p>用-raise来创建凸边：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert -raise 5x5 foo.png bar.png</span><br></pre></td></tr></table></figure><p>执行后，你会看到，照片的四周会一个5x5的边，如果你要一个凹下去的边，把-raise改为+raise就可以了。其实凸边和凹边看起来区别并不是很大。</p></li><li><p>其他</p><p>其他功能都是不太常用的，如果你感兴趣的话，可以看它的联机文档</p></li></ul><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><p>import是一个用于屏幕截图的组件，下面列出的是我们常用的功能，其他的功能，你参考它的man好了。</p><ul><li><p>截取屏幕的任一矩形区域</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import foo.png</span><br></pre></td></tr></table></figure><p>在输入上述的命令后，你的鼠标会变成一个十字，这个时候，你只要在想要截取的地方划一个矩形就可以了</p></li><li><p>截取程序的窗口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import -pause 3 -frame foo.png</span><br></pre></td></tr></table></figure><p>回车后，用鼠标在你想截的窗口上点一下即可。参数-frame的作用是告诉import，截图的时候把目标窗口的外框架带上，参数-pause的作用很重要，你可以试着把它去掉，对比一下，你会发现，目标窗口的标题栏是灰色的，pause就是让import稍微延迟一下，等你的目标窗口获得焦点了，才开始截图，这样的图才比较自然。</p></li><li><p>截取一个倾斜的窗口</p><p>如果想让你的截图比较cool，你可以把截取一个倾斜的窗口，方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import -rotate 30 -pause 3 -frame foo.png</span><br></pre></td></tr></table></figure></li><li><p>截取整个屏幕</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import -pause 3 -window root screen.png</span><br></pre></td></tr></table></figure><p>注意，暂停了3秒钟，你需要在3秒钟内切换到需要截取的画面噢。</p></li></ul><h2 id="display"><a href="#display" class="headerlink" title="display"></a>display</h2><p>display应该是我们使用的最为频繁的图像处理软件了，毕竟，还是看的多</p><ul><li><p>显示图片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">display foo.png</span><br></pre></td></tr></table></figure><p>如果你要显示多个文件，你可以使用通配符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">display *.png</span><br></pre></td></tr></table></figure></li><li><p>幻灯片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">display -delay 5 *</span><br></pre></td></tr></table></figure><p>每隔5个百分之秒显示一张图片</p></li><li><p>一些快捷键</p><ol><li>space(空格): 显示下一张图片</li><li>backspace(回删键):显示上一张图片</li><li>h: 水平翻转</li><li>v: 垂直翻转</li><li>/:顺时针旋转90度</li><li>:逆时针旋转90度</li><li>&gt;: 放大</li><li>&lt;: 缩小</li><li>F7:模糊图片</li><li>Alt+s:把图片中间的像素旋转</li><li>Ctrl+s:图象另存</li><li>Ctrl+d:删除图片</li><li>q: 退出</li></ol></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>ImageMagick还提供有丰富的编程接口，比如，你可以用php来调用它，用ImageMagick来生成验证码图片，效果非常棒。</p><p>ImageMagick还有一个小工具identify，它可以用来显示一个图片文件的详悉信息，比如格式、分辨率、大小、色深等等，你都可用它来帮你的忙。</p><p>如果你对命令行不太熟悉，你也可以在图片上单击，你会发现，通过鼠标你也可以完成图像的编辑。</p><p>ImageMagick的网站：<a href="http://www.imagemagick.org/">www.imagemagick.org</a>。<a href="http://www.imagemagick.org/image/examples.jpg">这里</a>是ImageMagick加工过的图片的例子。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;ImageMagick是一个神奇的软件，你可以通过命令行进行对图片你想到的一切操作……&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="ImageMagick" scheme="https://www.dieselchen.work/categories/ImageMagick/"/>
    
    
    <category term="ImageMagick" scheme="https://www.dieselchen.work/tags/ImageMagick/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper学习笔记</title>
    <link href="https://www.dieselchen.work/archives/398b07d0.html"/>
    <id>https://www.dieselchen.work/archives/398b07d0.html</id>
    <published>2022-03-18T08:57:14.000Z</published>
    <updated>2022-03-18T08:57:14.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Zookeeper是一个分布式应用程序协调服务，主要负责集中维护配置信息的服务，提供分布式的同步机制。其所有的服务都是做为其他分布式应用的基础。</p></blockquote><span id="more"></span><h2 id="Zookeeper-介绍"><a href="#Zookeeper-介绍" class="headerlink" title="Zookeeper 介绍"></a>Zookeeper 介绍</h2><p>Zookeeper是Google Chubby的一个开源实现，是现在很多分布式应用的重要组件，包括诸如Hadoop、HBase、Kafka等，可以说现在Zookeeper是大家必须掌握的一门软件。</p><p>Zookeeper主要提供以下几种服务：<br>1、命名服务<br>2、配置管理<br>3、集群管理<br>4、分布式锁<br>5、队列管理</p><h2 id="Zookeeper的特点"><a href="#Zookeeper的特点" class="headerlink" title="Zookeeper的特点"></a>Zookeeper的特点</h2><ul><li>简单：Zookeeper的核心是一个精简的文件系统，它支持一些简单的操作和一些抽象操作，例如，排序和通知。</li><li>丰富：Zookeeper的原语操作是很丰富的，可实现一些协调数据结构和协议。例如，分布式队列、分布式锁和一组同级别节点中的“领导者选举”。</li><li>高可用：Zookeeper支持集群模式，可以很容易的解决单点故障问题。</li><li>松耦合式交互：不同进程间的交互不需要了解彼此，甚至可以不必同时存在，某进程在zookeeper中留下消息后，该进程结束后其它进程还可以读这条消息。</li><li>资源库：Zookeeper实现了一个关于通用协调模式的开源共享存储库，能使开发者免于编写这类通用协议。</li></ul><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><p>为了熟悉Zookeeper的常用操作，最简单的办法就是使用Docker。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull zookeeper</span><br><span class="line"><span class="comment"># 完成后启动zookeeper</span></span><br><span class="line">$ docker run -p 2181:2181 zookeeper</span><br><span class="line"><span class="comment"># 重新打开一个Terminal界面，查找到当前容器的ID，登陆到容器中</span></span><br><span class="line">$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS              PORTS                                        NAMES</span><br><span class="line">63c3aa117fca        zookeeper           <span class="string">&quot;/docker-entrypoint.…&quot;</span>   About a minute ago   Up About a minute   2888/tcp, 0.0.0.0:2181-&gt;2181/tcp, 3888/tcp   infallible_saha</span><br><span class="line">$ docker <span class="built_in">exec</span> -it 63c3aa117fca bash</span><br></pre></td></tr></table></figure><p>现在一个单机版的Zookeeper就运行起来了，可以尝试常用的命令了。</p><h3 id="查看Server运行状态"><a href="#查看Server运行状态" class="headerlink" title="查看Server运行状态"></a>查看Server运行状态</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bash-4.4<span class="comment"># ./zkServer.sh status</span></span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /conf/zoo.cfg</span><br><span class="line">Mode: standalone</span><br></pre></td></tr></table></figure><h3 id="客户端连接服务器"><a href="#客户端连接服务器" class="headerlink" title="客户端连接服务器"></a>客户端连接服务器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash-4.4<span class="comment"># ./zkCli.sh </span></span><br><span class="line">Connecting to localhost:2181</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>查看: <code>ls</code></li><li>获取节点数据和更新信息: <code>get /zookeeper</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 3] get /zookeeper</span><br><span class="line"></span><br><span class="line">cZxid = 0x0</span><br><span class="line">ctime = Thu Jan 01 00:00:00 GMT 1970</span><br><span class="line">mZxid = 0x0</span><br><span class="line">mtime = Thu Jan 01 00:00:00 GMT 1970</span><br><span class="line">pZxid = 0x0</span><br><span class="line">cversion = -1</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 0</span><br><span class="line">numChildren = 1</span><br></pre></td></tr></table></figure><ul><li>获取节点的更新信息: <code>stat /zookeeper</code></li><li>创建节点: <code>craete [-s] [-e] path data acl</code>，<code>-s</code>表示创建顺序节点，<code>-e</code>表示创建临时节点。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 6] create /spring hello</span><br><span class="line">Created /spring</span><br><span class="line">[zk: localhost:2181(CONNECTED) 9] get /spring</span><br><span class="line">hello</span><br><span class="line">cZxid = 0x4</span><br><span class="line">ctime = Fri Apr 05 09:30:55 GMT 2019</span><br><span class="line">mZxid = 0x4</span><br><span class="line">mtime = Fri Apr 05 09:30:55 GMT 2019</span><br><span class="line">pZxid = 0x4</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 0</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 5</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure><ul><li>修改节点: <code>set path data [version]</code>，可以看到dataVersion变成了1</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 11] <span class="built_in">set</span> /spring spring-v1</span><br><span class="line">cZxid = 0x4</span><br><span class="line">ctime = Fri Apr 05 09:30:55 GMT 2019</span><br><span class="line">mZxid = 0x5</span><br><span class="line">mtime = Fri Apr 05 09:34:19 GMT 2019</span><br><span class="line">pZxid = 0x4</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 1</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 9</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure><ul><li>删除节点: <code>delete path [version]</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 17] delete /spring</span><br><span class="line">[zk: localhost:2181(CONNECTED) 18] get /spring</span><br><span class="line">Node does not exist: /spring</span><br></pre></td></tr></table></figure><ul><li>设置watch事件: <code>stat path [watch]</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 33] <span class="built_in">stat</span> /spring/bootx watch</span><br><span class="line">Node does not exist: /spring/bootx</span><br><span class="line">[zk: localhost:2181(CONNECTED) 34] create /spring/bootx bootx</span><br><span class="line">Created /spring/bootx</span><br><span class="line"></span><br><span class="line">WATCHER::</span><br><span class="line">[zk: localhost:2181(CONNECTED) 35] </span><br><span class="line">WatchedEvent state:SyncConnected <span class="built_in">type</span>:NodeCreated path:/spring/bootx</span><br></pre></td></tr></table></figure><ul><li>设置watch事件: <code>get path [watch]</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 38] get /spring/booty watch</span><br><span class="line">new-boot-y</span><br><span class="line">cZxid = 0xc</span><br><span class="line">ctime = Fri Apr 05 13:38:36 GMT 2019</span><br><span class="line">mZxid = 0xd</span><br><span class="line">mtime = Fri Apr 05 13:38:48 GMT 2019</span><br><span class="line">pZxid = 0xc</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 1</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 10</span><br><span class="line">numChildren = 0</span><br><span class="line">[zk: localhost:2181(CONNECTED) 39] <span class="built_in">set</span> /spring/booty nnew-boot-y</span><br><span class="line"></span><br><span class="line">WATCHER::</span><br><span class="line"></span><br><span class="line">WatchedEvent state:SyncConnected <span class="built_in">type</span>:NodeDataChanged path:/spring/booty</span><br><span class="line">cZxid = 0xc</span><br><span class="line">ctime = Fri Apr 05 13:38:36 GMT 2019</span><br><span class="line">mZxid = 0xe</span><br><span class="line">mtime = Fri Apr 05 13:39:26 GMT 2019</span><br><span class="line">pZxid = 0xc</span><br><span class="line">cversion = 0</span><br><span class="line">dataVersion = 2</span><br><span class="line">aclVersion = 0</span><br><span class="line">ephemeralOwner = 0x0</span><br><span class="line">dataLength = 11</span><br><span class="line">numChildren = 0</span><br></pre></td></tr></table></figure><ul><li>xxxx</li><li>xxxx</li></ul><h3 id="ACL权限"><a href="#ACL权限" class="headerlink" title="ACL权限"></a>ACL权限</h3><p>ZK的节点有5种操作权限：<code>CREATE、READ、WRITE、DELETE、ADMIN</code> 也就是 增、删、改、查、管理权限。</p><blockquote><p>注：这5种权限中，delete是指对子节点的删除权限，其它4种权限指对自身节点的操作权限。</p></blockquote><p>身份的认证有4种方式：</p><ul><li>world：默认方式，相当于全世界都能访问</li><li>auth：代表已经认证通过的用户(cli中可以通过addauth digest user:pwd 来添加当前上下文中的授权用户)</li><li>digest：即用户名:密码这种方式认证，这也是业务系统中最常用的</li><li>ip：使用Ip地址认证</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 42] getAcl /spring</span><br><span class="line"><span class="string">&#x27;world,&#x27;</span>anyone</span><br><span class="line">: cdrwa</span><br><span class="line">[zk: localhost:2181(CONNECTED) 43] getAcl /zookeeper</span><br><span class="line"><span class="string">&#x27;world,&#x27;</span>anyone</span><br><span class="line">: cdrwa</span><br></pre></td></tr></table></figure><h2 id="四字命令"><a href="#四字命令" class="headerlink" title="四字命令"></a>四字命令</h2><p>ZooKeeper 支持某些特定的四字命令字母与其的交互。它们大多是查询命令，用来获取 ZooKeeper 服务的当前状态及相关信息。用户在客户端可以通过 <code>telnet</code> 或 <code>nc</code> 向 ZooKeeper 提交相应的命令。 ZooKeeper 常用四字命令如下表所示。</p><table><thead><tr><th>Zookeeper四字命令</th><th>功能描述</th></tr></thead><tbody><tr><td>conf</td><td>输出相关服务配置的详细信息。</td></tr><tr><td>cons</td><td>列出所有连接到服务器的客户端的完全的连接 / 会话的详细信息。包括“接受 / 发送”的包数量、会话 id 、操作延迟、最后的操作执行等等信息。</td></tr><tr><td>dump</td><td>列出未经处理的会话和临时节点。</td></tr><tr><td>envi</td><td>输出关于服务环境的详细信息（区别于 conf 命令）。</td></tr><tr><td>reqs</td><td>列出未经处理的请求</td></tr><tr><td>ruok</td><td>测试服务是否处于正确状态。如果确实如此，那么服务返回“ imok ”，否则不做任何相应。</td></tr><tr><td>stat</td><td>输出关于性能和连接的客户端的列表。</td></tr><tr><td>wchs</td><td>列出服务器 watch 的详细信息。</td></tr><tr><td>wchc</td><td>通过 session 列出服务器 watch 的详细信息，它的输出是一个与 watch 相关的会话的列表。</td></tr><tr><td>wchp</td><td>通过路径列出服务器 watch 的详细信息。它输出一个与 session 相关的路径。</td></tr></tbody></table><p>使用方法</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="built_in">stat</span> | nc 127.0.0.1 2181</span><br><span class="line">Zookeeper version: 3.4.13-2d71af4dbe22557fda74f9a9b4309b15a7487f03, built on 06/29/2018 04:05 GMT</span><br><span class="line">Clients:</span><br><span class="line"> /172.17.0.1:53548[0](queued=0,recved=1,sent=0)</span><br><span class="line"> /127.0.0.1:56306[1](queued=0,recved=483,sent=485)</span><br><span class="line"></span><br><span class="line">Latency min/avg/max: 0/0/45</span><br><span class="line">Received: 500</span><br><span class="line">Sent: 501</span><br><span class="line">Connections: 2</span><br><span class="line">Outstanding: 0</span><br><span class="line">Zxid: 0xe</span><br><span class="line">Mode: standalone</span><br><span class="line">Node count: 8</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Zookeeper是一个分布式应用程序协调服务，主要负责集中维护配置信息的服务，提供分布式的同步机制。其所有的服务都是做为其他分布式应用的基础。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Zookeeper" scheme="https://www.dieselchen.work/categories/Zookeeper/"/>
    
    
    <category term="Zookeeper" scheme="https://www.dieselchen.work/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>2021年终总结</title>
    <link href="https://www.dieselchen.work/archives/a23e5172.html"/>
    <id>https://www.dieselchen.work/archives/a23e5172.html</id>
    <published>2022-01-01T02:05:35.000Z</published>
    <updated>2022-01-01T02:05:35.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2021年就这样过去了，这一年有得有失，稍微总结一下</p></blockquote><span id="more"></span><h3 id="年初计划"><a href="#年初计划" class="headerlink" title="年初计划"></a>年初计划</h3><ul><li>工资翻倍 ❌</li><li>减肥让自己满意❌</li><li>持续学习，完成3个小项目✅</li><li>阅读5本书 进行中……</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>大概回顾：</li></ul><p>​       21年是毕业后的第一年，这一年经历了一次被动跳槽，何为被动跳槽呢？那就要简述一下自己的第一段工作经历了。第一份工作的薪水不高。但是遇到的技术主管是字节出来的，直系领导是外企出来的，他们都还怀揣着创业的梦想。他们都来到了这家儿童线上体育教育公司。我们经历了公司搬家，搬到了周围都是大厂的地方。一度以为一直会在这家公司干着，但事与愿违，可能技术主管和老板的观念产生了分歧又或是老板不想再大力投入互联网开发。我不得已开始了第二段工作经历。其实也拿了好几个offer，有比现在这家做海外家具贸易工资高的。但要不就是外包，要不就是方向太冷门。虽然现在这家公司薪水给的不高。但不怎么加班让我有了更多的时间丰富自己的课余时间。可以进行必要的减肥计划、完成自己的github小项目。</p><ul><li>收获</li></ul><p>​        大学的室友都在北方工作，我选择来上海工作的原因可能就是想陪陪家里人吧。家里人在这做生意。今年最大的收获就是隔三差五的可以见到自己的父母，可以陪伴他们。所以我会好好的在上海尽力扎下根来。</p><ul><li>失去</li></ul><p>​        这本是一个学习博客，本不想谈自己过多的私事。但是作为年终总结还是想聊一下吧。21年下半年算是有一段低谷时期。谈了一段4年的恋爱在今年分手了，我也不确定自己现在是否已经走了出来。但是人总要往前看。现阶段就是努力搞钱。加油，加油</p><ul><li>展望</li></ul><p>​       我希望22年能够获得自己想要的。能够升职加薪，能够继续充实自己的专业能力。可以的话可以考个软考中级抑或是完成自己的98名校梦。不管怎么说，生活都要积极向上。努力的人生都不会太差。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;2021年就这样过去了，这一年有得有失，稍微总结一下&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="总结" scheme="https://www.dieselchen.work/categories/%E6%80%BB%E7%BB%93/"/>
    
    <category term="成长与收获" scheme="https://www.dieselchen.work/categories/%E6%80%BB%E7%BB%93/%E6%88%90%E9%95%BF%E4%B8%8E%E6%94%B6%E8%8E%B7/"/>
    
    
    <category term="总结" scheme="https://www.dieselchen.work/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Docker构建一个简单的java开发环境</title>
    <link href="https://www.dieselchen.work/archives/2700d4b7.html"/>
    <id>https://www.dieselchen.work/archives/2700d4b7.html</id>
    <published>2021-12-11T08:44:00.000Z</published>
    <updated>2021-12-11T08:44:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>首先确保已经安装了 Docker ，并且把 <code>openjdk:8</code> 的镜像拉取下来</p></blockquote><span id="more"></span><p>目前 Java 语言的版本很多，除了常用的 Java 8，有一些遗留项目可能使用了 Java 7，也可能有一些比较新的的项目使用了 Java 10 以上的版本。如果想切换自己本地的 Java 开发环境，折腾起来还是需要花费一些时间的，并且日后在不同版本间切换每次都要折腾一次。</p><p>Docker 的出现让我们维护不同版本的开发编译环境变得简单，如果你还不知道什么是 Docker 可以看看 <a href="http://edulinks.cn/2018/06/20/20180620-docker-overview/">Docker 入门介绍</a>。我们可以采用两种方式来构建 java 的开发环境，一种是在容器内编译运行，一种是在容器外编译运行，下面分别来看看具体如何操作。</p><h2 id="容器内编译与运行"><a href="#容器内编译与运行" class="headerlink" title="容器内编译与运行"></a>容器内编译与运行</h2><p>本文以一个简单的 Helloworld 程序为例，工程的文件目录结构及代码如下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls -lh</span></span><br><span class="line">total 24</span><br><span class="line">-rw-r--r--  1 shiqiang  staff    60B 11 11 19:02 Dockerfile</span><br><span class="line">-rw-r--r--  1 shiqiang  staff   123B 11 11 19:02 Helloworld.java</span><br></pre></td></tr></table></figure><p>代码的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Helloworld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello world.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>做好以上准备后，就可以编辑 Dockerfile 的内容。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>  <span class="comment">#基于 openjdk:8 构建镜像</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /usr/src/myapp    <span class="comment">#将目录内的代码拷贝到镜像中 /usr/src/myapp 的位置</span></span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/myapp  <span class="comment">#将 /usr/src/myapp 设为工作目录</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> javac Helloworld.java    <span class="comment">#运行编译命令，编译 Helloworld.java 程序</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;Helloworld&quot;</span>]    <span class="comment">#执行编译出来的 Helloworld</span></span></span><br></pre></td></tr></table></figure><p>构建镜像文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker build -t java_in_docker_env_8 .</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> docker images <span class="comment"># 使用 docker images 命令可以看到构建出来的 java_in_docker_env_8 镜像</span></span></span><br></pre></td></tr></table></figure><p>运行容器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -it --rm java_in_docker_env_8</span></span><br><span class="line">Hello world.</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls -lh</span>                                  </span><br><span class="line">total 24</span><br><span class="line">-rw-r--r--  1 shiqiang  staff   112B 11 12 10:53 Dockerfile</span><br><span class="line">-rw-r--r--  1 shiqiang  staff   123B 11 12 10:49 Helloworld.java</span><br></pre></td></tr></table></figure><p>可以看到程序的输出，并且看到当前目录下并有没编译出来的结果。但是这种方式每次启动容器的时候都要进行编译，并且没有办法把编译结果进行分享，下一节的内容介绍如何在容器外保存编译结果。</p><h2 id="容器外编译与运行"><a href="#容器外编译与运行" class="headerlink" title="容器外编译与运行"></a>容器外编译与运行</h2><p>工作目录和代码准备与上一节相同，Dockerfile 文件与上一节略有不同。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /usr/src/myapp</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /usr/src/myapp</span></span><br></pre></td></tr></table></figure><p>构建镜像文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker build -t java_env_8</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker images <span class="comment"># 使用 docker images 命令可以看到构建出来的 java_env_8 镜像</span></span></span><br></pre></td></tr></table></figure><p>编译文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --rm -v <span class="string">&quot;<span class="variable">$PWD</span>&quot;</span>:/usr/src/myapp -w /usr/src/myapp java_env_8 javac Helloworld.java</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls -lh<span class="comment"># 可以看到编译出来的结果</span></span></span><br><span class="line">total 32</span><br><span class="line">-rw-r--r--  1 shiqiang  staff   112B 11 12 10:53 Dockerfile</span><br><span class="line">-rw-r--r--  1 shiqiang  staff   427B 11 12 11:09 Helloworld.class</span><br><span class="line">-rw-r--r--  1 shiqiang  staff   123B 11 12 10:49 Helloworld.java</span><br></pre></td></tr></table></figure><p>运行程序。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --rm -v <span class="string">&quot;<span class="variable">$PWD</span>&quot;</span>:/usr/src/myapp -w /usr/src/myapp java_env_8 java Helloworld</span>      </span><br><span class="line">Hello world.</span><br></pre></td></tr></table></figure><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>本文仅仅构建了一个简单的 java 开发环境，使用这种方式编译运行 java 程序的好处是无需在本地安装 jdk ，在需要为多个 jdk 版本编译程序的时候更加方便。但是对于复杂的工程常常使用 maven 或者 graddle 进行构建。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;首先确保已经安装了 Docker ，并且把 &lt;code&gt;openjdk:8&lt;/code&gt; 的镜像拉取下来&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Docker" scheme="https://www.dieselchen.work/categories/Docker/"/>
    
    <category term="Java" scheme="https://www.dieselchen.work/categories/Docker/Java/"/>
    
    
    <category term="Docker" scheme="https://www.dieselchen.work/tags/Docker/"/>
    
    <category term="Java" scheme="https://www.dieselchen.work/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>上海的互联网公司</title>
    <link href="https://www.dieselchen.work/archives/44fdb130.html"/>
    <id>https://www.dieselchen.work/archives/44fdb130.html</id>
    <published>2021-11-01T02:05:35.000Z</published>
    <updated>2021-11-01T02:05:35.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>目前上海it公司介绍</p></blockquote><span id="more"></span><h3 id="第一梯队"><a href="#第一梯队" class="headerlink" title="第一梯队"></a>第一梯队</h3><p>1.阿里巴巴（阿里上海研发中心，闵行大虹桥，本地生活总部：盒马/口碑，阿里国际站等，10-10-5，加班氛围浓，年底一般1+3=4个月，极少数最多可拿7个月，考核按3-6-1比例）；</p><p>2.腾讯（腾讯华东总部，徐汇漕河泾，游戏、人工智能、云计算等，10-10-5，归属感强，食堂伙食好。年底标准2个月，一般能拿4个月，极少数拿8个月，部分团队n个月，考核按 1 星到 5 星）；</p><p>3.字节跳动（上海研发中心、巨量引擎，闵行漕河泾，抖音、游戏、教育等，字节本体和巨量引擎差距较大，不同岗位加班差距很大，21年8月取消大小周。年终0-6个月，一般拿3个月，少数5个月以上）；</p><p>4.蚂蚁集团（上海研发中心，唯一未上市巨头，浦东支付宝大厦，支付宝、蚂蚁科技中心等，10-10-5，比较卷，年终与阿里类似）;</p><p>5.美团点评（大众点评，长宁北新泾，生活服务平台，10-9-5，年底一般3.5个月，其中0.5个月上半年绩效工资+0.5个月下半年绩效工资+2.5个月年终奖工资）；</p><p>6.拼多多（总部，长宁娄山关路，综合电商，11-11-6，周末给加班费，猝死1例；年底一般4个月，其中固定年终奖 2 个月，在春节前发放；绩效年终奖则根据 “ 271 ” 的绩效考核评定后发放，70% 的员工能拿 2 个月）。</p><h3 id="第二梯队——背靠巨头-or-小巨头"><a href="#第二梯队——背靠巨头-or-小巨头" class="headerlink" title="第二梯队——背靠巨头 or 小巨头"></a><strong>第二梯队——背靠巨头 or 小巨头</strong></h3><ol><li>哔哩哔哩（总部，杨浦五角场，视频平台，10-8-5，年奖一般2到3个月）；</li><li>滴滴出行（上海分公司，静安区共和新路，出行平台，10-10-5，年奖一般3个月）；</li><li>携程（总部，长宁大虹桥，OTA巨头，10-7-5，年奖一般3个月，随月份发或半年发）；</li><li>饿了么（总部，普陀近铁城市广场，阿里本地生活，10-9-5，年奖一般2个月）；</li><li>阅文集团（总部，浦东张江高科，网文平台，腾讯，10-7-5，年奖一般4个月）；</li><li>哈啰出行（总部，闵行莘庄，出行平台，阿里系独立公司，10-10-5，年奖一般2个月）；</li><li>趣头条（总部，浦东广兰路，资讯网文类，含趣头条和米读，10-10-5，年奖一般3个月）；</li><li>快手（上海分公司少量人员，徐汇漕河泾，短视频，21年7月取消大小周，年奖4个月）；</li><li>百度（上海分公司，浦东中科路，研发/电销团队，9-9-5，年奖一般3个月）；</li><li>京东（上海分公司，宝山<a href="https://www.zhihu.com/search?q=%E5%91%BC%E5%85%B0%E8%B7%AF&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2243717386%7D">呼兰路</a>，综合电商，9-9-5，年奖一般2个月）；</li><li>网易（上海分公司，徐汇漕河泾，10-8-5，年奖一般3个月）；</li></ol><h3 id="第三梯队——独角兽or垂直领域or互联网-（排名不分先后，上榜即可）"><a href="#第三梯队——独角兽or垂直领域or互联网-（排名不分先后，上榜即可）" class="headerlink" title="第三梯队——独角兽or垂直领域or互联网+（排名不分先后，上榜即可）"></a><strong>第三梯队——独角兽or垂直领域or互联网+（排名不分先后，上榜即可）</strong></h3><p><strong>电商类</strong></p><ul><li>得物App（总部，杨浦黄兴路，炒鞋电商，9-9-5，大小周，周末给加班费，年底1个月➕四个季度各0.75个月）</li><li>唯品会（上海分公司，闵行申长路，品牌特卖，9-9-5，部分大小周）</li><li>叮咚买菜（总部，浦东广兰路，生鲜电商，9-9-5，大小周）</li><li><a href="https://www.zhihu.com/search?q=%E8%BF%94%E5%88%A9%E7%BD%91&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2243717386%7D">返利网</a>（总部，徐汇龙漕路，导购电商，9-8-5，年底1个月）</li><li>小红书（总部，黄浦新天地，内容电商，10-9-5）</li><li>洋码头（总部，静安江场三路，<a href="https://www.zhihu.com/search?q=%E8%B7%A8%E5%A2%83%E7%94%B5%E5%95%86&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2243717386%7D">跨境电商</a>，加班不明）</li><li>达达&amp;<a href="https://www.zhihu.com/search?q=%E4%BA%AC%E4%B8%9C%E5%88%B0%E5%AE%B6&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2280108280%7D">京东到家</a>（总部，杨浦东方渔人码头，电商及本地生活劳动力外包，9-9-5）</li><li>微盟（总部，宝山淞发路，SaaS小程序服务商，9-7-5，年底1个月）</li><li>宝尊电商（总部，静安万荣路，toB，淘宝代运营，9-6-5，周末给加班费，年底1个月）</li><li><a href="https://www.zhihu.com/search?q=%E6%89%BE%E9%92%A2%E7%BD%91&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2243717386%7D">找钢网</a>（总部，嘉定区新培路，钢铁产业链电商平台，9-9-6，年底一般0.5个月）</li></ul><p><strong>资讯类</strong></p><ul><li>虎扑（总部，虹口足球场，篮球等门户网，9-6-5，部分部门大小周）</li><li>爱奇艺（上海分公司，长宁临虹路，百度，9-7-5，加班有加班费）</li><li>即刻（总部，杨浦<a href="https://www.zhihu.com/search?q=%E6%B7%9E%E6%B2%AA%E8%B7%AF&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2283520830%7D">淞沪路</a>，互联网资讯，加班不明）</li><li>任意门（总部，产品：soul，浦东大唐国际，即时通讯，10-8-5）</li><li>喜马拉雅（总部，浦东丹桂路，电台类，10-7-5，部分10-10-5）</li><li><a href="https://www.zhihu.com/search?q=%E8%9C%BB%E8%9C%93FM&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2243717386%7D">蜻蜓FM</a>（总部，浦东陆家嘴软件园，音频电台类,10-7-5，部分10-10-5）</li><li>樊登读书（总部，长宁<a href="https://www.zhihu.com/search?q=%E9%81%B5%E4%B9%89%E8%B7%AF&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2243717386%7D">遵义路</a>，音频读书类，部分9-9-5，部分9-6-5）</li><li>咪咕（上海分公司，<a href="https://www.zhihu.com/search?q=%E6%B5%A6%E4%B8%9C%E9%87%91%E6%A1%A5&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2243717386%7D">浦东金桥</a>，移动下属视频/音乐类，加班不明）</li></ul><p><strong>旅游类</strong></p><ul><li>同程艺龙（上海研发中心，长宁中山公园，旅游一线，加班不明）</li><li>驴妈妈（总部，嘉定景域大道，旅游二线，9-8-5，近年有年奖拖欠情况）</li><li>途牛（上海分公司，松江<a href="https://www.zhihu.com/search?q=%E5%98%89%E6%9D%BE%E5%8D%97%E8%B7%AF&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2283520830%7D">嘉松南路</a>，旅游二线，加班不明）</li></ul><p><strong>人工智能&amp;商业智能</strong></p><ul><li>触宝（总部，闵行新龙路，<a href="https://www.zhihu.com/search?q=%E8%A7%A6%E5%AE%9D%E8%BE%93%E5%85%A5%E6%B3%95&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2243717386%7D">触宝输入法</a>、触宝电话等海外市场为主，10-9-5）</li><li>商汤（总部，徐汇漕河泾，人工智能领域，9-8-5，猝死1例，年奖一般3个月）</li><li>旷视（上海分公司，徐汇虹漕路，人工智能领域，年奖一般2个月）</li><li>依图（总部，长宁区<a href="https://www.zhihu.com/search?q=%E5%A8%84%E5%B1%B1%E5%85%B3%E8%B7%AF&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2283520830%7D">娄山关路</a>，人工智能领域，年底1-2个月）</li><li><a href="https://www.zhihu.com/search?q=%E4%BA%91%E4%BB%8E&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2283520830%7D">云从</a>（上海分公司，浦东张江高科，人工智能领域）</li><li>ucloud（总部，杨浦区隆昌路，IaaS、PaaS服务商）</li><li>泛微网络（总部，闵行联航路，主要产品：eteams，OA类SaaS服务商）</li><li><a href="https://www.zhihu.com/search?q=%E5%A3%B0%E7%BD%91&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2283520830%7D">声网</a>（总部，杨浦五角场，音视频PaaS服务商）</li><li><a href="https://www.zhihu.com/search?q=%E4%B8%83%E7%89%9B%E4%BA%91&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2243717386%7D">七牛云</a>（总部，浦东亮秀路，PaaS服务商，云计算及数据服务）</li></ul><p><strong>工具类</strong></p><ul><li>WiFi<a href="https://www.zhihu.com/search?q=%E4%B8%87%E8%83%BD%E9%92%A5%E5%8C%99&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2268918674%7D">万能钥匙</a>（总部，浦东张衡路，连尚科技，wifi工具类）</li><li>商米科技（总部，杨浦淞沪路，IoT硬件解决方案，小米）</li><li>收钱吧（总部，<a href="https://www.zhihu.com/search?q=%E8%99%B9%E5%8F%A3%E5%8C%BA&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2243717386%7D">虹口区</a>中山北一路，收银硬件服务商，9-6-5）</li><li>前程无忧（总部，浦东张江高科，互联网招聘领域）</li><li><a href="https://www.zhihu.com/search?q=%E6%A0%BC%E7%93%A6%E6%8B%89&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2243717386%7D">格瓦拉</a>（总部，浦东陆家嘴，电影话剧等票务）</li><li>世纪佳缘（总部，徐汇漕溪北路，相亲交友网站）</li></ul><p><strong>游戏类</strong></p><ul><li>米哈游（总部，徐汇宜山路，游戏，代表作崩坏、原神系列，10-10-5）</li><li>莉莉丝游戏（总部，闵行宜山路，游戏，代表作万国觉醒等）</li><li><a href="https://www.zhihu.com/search?q=%E6%B8%B8%E6%97%8F%E7%BD%91%E7%BB%9C&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2243717386%7D">游族网络</a>（总部，徐汇宜山路，游戏）</li><li><a href="https://www.zhihu.com/search?q=%E4%B8%89%E4%B8%83%E4%BA%92%E5%A8%B1&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2268918674%7D">三七互娱</a>（总部，普陀武宁路，游戏）</li><li>巨人网络（总部，徐汇宜山路➡️松江中凯路，游戏）</li><li>盛趣游戏（总部，浦东张江高科，游戏）</li><li>心动网络（总部，静安大宁，游戏）</li><li>TapTap（总部，静安万荣路，游戏）</li><li>小牛互娱（总部，浦东张江高科，游戏&amp;应用软件，9-12-6，指纹打卡，工时排行）</li></ul><p><strong>房产汽车类</strong></p><ul><li>58（58上海分公司+安居客总部，浦东陆家嘴软件园，年底9-9-6，平时9-8-5）</li><li>链家/贝壳（上海分公司，黄浦黄陂南路，互联网房产，21年10月中旬开始上海地区研发和金融团队大规模裁员N+3，10-9-5）</li><li>途虎养车（总部，闵行虹中路，互联网汽车b2c）</li><li><a href="https://www.zhihu.com/search?q=%E7%99%BE%E5%A7%93%E7%BD%91&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2243717386%7D">百姓网</a>（总部，徐汇浩然大楼，分类信息检索，9-7-5）</li></ul><p><strong>金融类</strong></p><ul><li>陆金所（总部，浦东陆家嘴，互联网金融，加班不明）</li><li>平安系列（上海分公司，办公地点遍布上海，平安好医生在浦东中科路，9-6-5）</li><li><a href="https://www.zhihu.com/search?q=%E4%B8%9C%E6%96%B9%E8%B4%A2%E5%AF%8C&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2268918674%7D">东方财富</a>（总部，徐汇宛平南路，互联网金融，加班不明）</li><li>众安在线（总部，黄浦圆明园路，互联网保险，加班不明）</li><li>360数科（总部，浦东陆家嘴，360旗下信贷平台，加班不明）</li></ul><p><strong>在线教育</strong></p><ul><li>沪江英语（总部，浦东张江高科，互联网在线教育，加班不明）</li><li>英语流利说（总部，杨浦长阳创谷，互联网英语教育，加班不明）</li><li>掌门1对1（总部，虹口四平路，互联网在线教育，大小周，指纹打卡，有工时排名）</li></ul><p><strong>物流运输</strong></p><ul><li>满帮（上海分公司，长宁天山路，运满满，互联网物流）</li></ul><h3 id="外包公司"><a href="#外包公司" class="headerlink" title="外包公司"></a>外包公司</h3><p>1.博朗软件Bleum(上海)</p><p>2.中软国际(北京)</p><p>3.东软集团Neusoft (沈阳)</p><p>4.博彦科技BeyondSoft (北京)</p><p>5.中电金信(北京)</p><p>\6. 法本信息（深圳）</p><p>7.浙大网新Insigma (杭州)</p><p>8.奥博杰天Objectiva (北京)</p><p>9.浪潮Inspur (济南)</p><p>10.软通动力iSoftStone(北京 )</p><p>11.福瑞博德Freeborders(深圳 )</p><p>12.信必优Symbio(北京)</p><p>\13. 大展科技Achievo(深圳)</p><p>14.恒生电子hundsun(杭州)</p><p>15.日电卓越软件(北京 )</p><p>16.大连华信(大连 )</p><p>17.中和软件chuwa(. 上海)</p><p>18.新致软件newtouch(上海)</p><p>19.艾斯克雷(北京)</p><p>20.海隆软件hyron(上海)</p><p>21.大宇宙信息(天津)</p><p>22.晟峰软件(上海)</p><p>23.富士通信息(上海)</p><p>\24. NTTDATA(北京 )</p><p>25.宏智科技(苏州)</p><p>26.神州数码通用软件(北京)</p><p>27.凌志软件(上海苏州)</p><p>28.音泰思(成都 )</p><p>29.微创软件(上海)</p><p>30.开目佰钧成(武汉)</p><p>31.浩鲸智能（南京）</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;目前上海it公司介绍&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="公司" scheme="https://www.dieselchen.work/categories/%E5%85%AC%E5%8F%B8/"/>
    
    
    <category term="公司" scheme="https://www.dieselchen.work/tags/%E5%85%AC%E5%8F%B8/"/>
    
  </entry>
  
  <entry>
    <title>Docker简单概述</title>
    <link href="https://www.dieselchen.work/archives/3647edf5.html"/>
    <id>https://www.dieselchen.work/archives/3647edf5.html</id>
    <published>2021-09-20T08:30:32.000Z</published>
    <updated>2021-09-20T08:30:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Docker 是一个应用程序开发、部署、运行的平台，使用 go 语言开发。相较于传统的主机虚拟化，Docker 提供了轻量级的应用隔离方案，并且为我们提供了应用程序快速扩容、缩容的能力。</p></blockquote><span id="more"></span><h3 id="Docker-Engine"><a href="#Docker-Engine" class="headerlink" title="Docker Engine"></a>Docker Engine</h3><p>先来看一下 Docker Engine 的结构，它是一个Client-Server应用程序，包含了三个主要部分：dockerd守护进程、REST API接口层、cli接口层(管理容器、镜像、网络、存储等等)。</p><p>![image-20220831163205749](/Users/dieselchen/Library/Application Support/typora-user-images/image-20220831163205749.png)</p><h4 id="Docker-架构"><a href="#Docker-架构" class="headerlink" title="Docker 架构"></a>Docker 架构</h4><p>Docker采用的是CS架构，docker client 通过Unix套接字或者网络接口访问 docker daemon，从而完成容器、镜像等内容的管理。</p><p><img src="https://image.dieselchen.work/uPic/2022/08/31/image-20220831163353576.png" alt="image-20220831163353576"></p><h3 id="Docker-Daemon"><a href="#Docker-Daemon" class="headerlink" title="Docker Daemon"></a>Docker Daemon</h3><p>Docker的守护进程监听对于API的请求，并且管理Docker对象，包括容器、镜像、网络、存储等。不同守护进程之间可以互相通信，从而构成集群服务。</p><h3 id="Docker-Client"><a href="#Docker-Client" class="headerlink" title="Docker Client"></a>Docker Client</h3><p>Dokcer 客户端 docker 命令是与Dokcer交互的主要方式</p><h3 id="Docker-仓库"><a href="#Docker-仓库" class="headerlink" title="Docker 仓库"></a>Docker 仓库</h3><p>Docker仓库保存Docker镜像，可以通过<code>docker pull</code>以及<code>docker push</code>来下载、上传镜像文件。</p><h3 id="Docker-对象"><a href="#Docker-对象" class="headerlink" title="Docker 对象"></a>Docker 对象</h3><p><em>1. 镜像</em></p><p>镜像是一个用来构建容器的只读模版，通常一个镜像会依赖其他的镜像。例如我们编写的一个Node程序需要依赖Node环境，那在构建这个应用镜像时就需要依赖基础的Node镜像。</p><p>我们可以创建自己的镜像，也可以使用仓库中已经创建好的镜像。创建镜像需要创建一个 <code>Dockerfile</code> 文件。每个Dockerfile定义镜像文件中的一层，当定义发生变化的时候，只需要更新着一层的文件即可。</p><p><em>2. 容器</em></p><p>容器是一个运行时状态下的镜像，通过docker命令我们可以创建、启动、停止、删除容器。例如以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -i -t ubuntu /bin/bash</span><br></pre></td></tr></table></figure><p>实际上经过了6个步骤：1、如果本地没有 <em>ubuntu</em> 镜像，那么首先执行 <code>docker pull ubuntu</code>镜像文件到本地；2、自动创建一个容器，相当于命令 <code>dock container create</code>；3、Docker分配一块文件系统给容器；4、Docker创建网络接口、分配网络地址；5、启动容器，并且执行<code>/bin/bash</code>命令；6、我们可以在bash中执行命令，执行exit后，退出ubuntu的命令行，同时容器关闭。</p><p><em>3. 网络</em></p><p>Docker的网络子系统是可插拔的，支持bridge、host、overlay、macvlan、none等网络模式。熟悉虚拟机的同学可能对这些有概念，想要了解更多参考<a href="https://docs.docker.com/network/network-tutorial-standalone/">这里</a>。</p><p><em>4. 存储</em></p><p>默认情况下，容器中的应用生成的所有文件都存放在一个可写的容器层，意味着这些数据的生命周期和容器保持一致，一旦容器重启数据就丢了。另外，这些文件与容器高度关联，想要将这些文件分享给其他的容器或者设备非常困难。</p><p>为此，Docker提供了两种方案解决数据问题：<em>Volumes</em>、<em>bind mount</em>。不管使用哪种方式，容器内看起来都是一样的，或者作为一个文件夹存在、或者作为一个文件存在。</p><p>上图说明了不同方式的区别，<em>Volumes</em> 是存在本地文件系统中的一部分，其他应用程序不能对这个文件系统进行修改，Linux下在<code>/var/lib/docker/volumes</code>。这是数据持久化的最好方案。<em>Bind Mount</em> 允许将主机中任何位置的数据挂载，这些数据的读写没有收到保护。<em>tmps</em>是存储在主机内存中的数据。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Docker 是一个应用程序开发、部署、运行的平台，使用 go 语言开发。相较于传统的主机虚拟化，Docker 提供了轻量级的应用隔离方案，并且为我们提供了应用程序快速扩容、缩容的能力。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Docker" scheme="https://www.dieselchen.work/categories/Docker/"/>
    
    
    <category term="Docker" scheme="https://www.dieselchen.work/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>简单了解一下Mysql和InnoDB</title>
    <link href="https://www.dieselchen.work/archives/e6f74ec.html"/>
    <id>https://www.dieselchen.work/archives/e6f74ec.html</id>
    <published>2021-08-15T07:40:10.000Z</published>
    <updated>2021-08-15T07:40:10.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>平常在数据库选型时，会考虑到MySQL、PostgreSQL、MongoDB、sqlite，但你知道他们之间的区别吗？一直以来都没有一个清晰的认知，所以最近两个月的时间看了几本数据库相关的书籍并且阅读了 MySQL 的官方文档，在此来总结一下相关知识点</p></blockquote><span id="more"></span><h2 id="数据库的定义"><a href="#数据库的定义" class="headerlink" title="数据库的定义"></a>数据库的定义</h2><p>很多开发者在最开始时其实都对数据库有一个比较模糊的认识，觉得数据库就是一堆数据的集合，但是实际却比这复杂的多，数据库领域中有两个词非常容易混淆，也就是<em>数据库</em>和<em>实例</em>：</p><ul><li>数据库：物理操作文件系统或其他形式文件类型的集合；</li><li>实例：MySQL 数据库由后台线程以及一个共享内存区组成；</li></ul><h2 id="事务与隔离级别"><a href="#事务与隔离级别" class="headerlink" title="事务与隔离级别"></a>事务与隔离级别</h2><p>在介绍了锁之后，我们再来谈谈数据库中一个非常重要的概念 —— 事务；相信只要是一个合格的软件工程师就对事务的特性有所了解，其中被人经常提起的就是事务的原子性，在数据提交工作时，要么保证所有的修改都能够提交，要么就所有的修改全部回滚。</p><p>但是事务还遵循包括原子性在内的 ACID 四大特性：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持久性（Durability）；文章不会对这四大特性全部展开进行介绍，相信你能够通过 Google 和数据库相关的书籍轻松获得有关它们的概念，本文最后要介绍的就是事务的四种隔离级别。</p><h3 id="几种隔离级别"><a href="#几种隔离级别" class="headerlink" title="几种隔离级别"></a>几种隔离级别</h3><p>事务的隔离性是数据库处理数据的几大基础之一，而隔离级别其实就是提供给用户用于在性能和可靠性做出选择和权衡的配置项。</p><p>ISO 和 ANSI SQL 标准制定了四种事务隔离级别，而 InnoDB 遵循了 SQL:1992 标准中的四种隔离级别：<code>READ UNCOMMITED</code>、<code>READ COMMITED</code>、<code>REPEATABLE READ</code> 和 <code>SERIALIZABLE</code>；每个事务的隔离级别其实都比上一级多解决了一个问题：</p><ul><li><code>RAED UNCOMMITED</code>：使用查询语句不会加锁，可能会读到未提交的行（Dirty Read）；</li><li><code>READ COMMITED</code>：只对记录加记录锁，而不会在记录之间加间隙锁，所以允许新的记录插入到被锁定记录的附近，所以再多次使用查询语句时，可能得到不同的结果（Non-Repeatable Read）；</li><li><code>REPEATABLE READ</code>：多次读取同一范围的数据会返回第一次查询的快照，不会返回不同的数据行，但是可能发生幻读（Phantom Read）；</li><li><code>SERIALIZABLE</code>：InnoDB 隐式地将全部的查询语句加上共享锁，解决了幻读的问题；</li></ul><p>MySQL 中默认的事务隔离级别就是 <code>REPEATABLE READ</code>，但是它通过 Next-Key 锁也能够在某种程度上解决幻读的问题。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;平常在数据库选型时，会考虑到MySQL、PostgreSQL、MongoDB、sqlite，但你知道他们之间的区别吗？一直以来都没有一个清晰的认知，所以最近两个月的时间看了几本数据库相关的书籍并且阅读了 MySQL 的官方文档，在此来总结一下相关知识点&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="MySQL" scheme="https://www.dieselchen.work/categories/MySQL/"/>
    
    
    <category term="MySQL" scheme="https://www.dieselchen.work/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>2021年8月入门级电脑推荐</title>
    <link href="https://www.dieselchen.work/archives/8764d356.html"/>
    <id>https://www.dieselchen.work/archives/8764d356.html</id>
    <published>2021-08-03T09:31:43.000Z</published>
    <updated>2021-08-03T10:26:57.992Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>远房表弟中考考了省里最好的高中，正直暑假想配台电脑，列了一份清单。</p></blockquote><span id="more"></span><h3 id="配置一：京东整机"><a href="#配置一：京东整机" class="headerlink" title="配置一：京东整机"></a>配置一：京东整机</h3><p>处理器：i7-860 、i7-920、i7-930、i7-940随机发货   4核8线程  基本频率2.66GHz 最大睿频2.99GHz</p><p>显卡：   GTX1050 4g独显</p><p>主板：   英特尔 H55</p><p>内存：   镁光 8*2 16g双通道   ddr3 频率1600</p><p>硬盘：   镁光 nvme M.2 512固态硬盘</p><p>显示器 ：24寸 1080p 75Hz va面板</p><p>到手价：<span style='color:;background:rgb(249,240,242);font-size:文字大小;padding-left:5px;padding-right:5px;'>3880元</span></p><p>优点：这个价位性价比还是可以的。和实体店一样，赠送鼠标 键盘 鼠标垫。收到货连上电源线就可以用</p><p>缺点：处理器频率偏低了，主板太老了可扩展性也不太行。只支持ddr3内存。内存虽说16g但是 ddr3频率有点低。现在都是ddr4 入门级。个人不太推荐这款。主要核心 cpu和主板都有点老。不好升级。主板是2010年出的，</p><p>cpu是2008年上市的。相当于 10年之前的顶级配置 在 10年之后便宜价出售。</p><h3 id="配置二：京东整机"><a href="#配置二：京东整机" class="headerlink" title="配置二：京东整机"></a>配置二：京东整机</h3><p>处理器：i5 10400F 6核心12线程 基本频率2.9GHz 最大睿频4.3GHz</p><p>显卡：    GTX1050Ti 4g独显</p><p>主板：    微星 B560M</p><p>内存：    威刚 8G ddr4  频率2666</p><p>硬盘：   256  nvme M.2 固态硬盘</p><p>到手价：<span style='color:;background:rgb(249,240,242);font-size:文字大小;padding-left:5px;padding-right:5px;'>3599元</span>    </p><p>优点：处理器+主板都是近两年的新品。比较推荐。显卡入门级。内存也是ddr4 。</p><p>缺点：1显示器需要单独购买。500元左右可以买到入门级配置 24寸+1080p+75hz +ips面板 那合计 要在4100-4200左右。2.独立显卡考虑运送过程中有损坏，和主机分开发货，需要安装一下。有安装视频。</p><p>内存还是推荐16g ddr4 硬盘 500G固态 那就+500 总预算 4100+显示器价格 ～ 4600左右</p><h3 id="配置三：淘宝"><a href="#配置三：淘宝" class="headerlink" title="配置三：淘宝"></a>配置三：淘宝</h3><p><img src="https://image.dieselchen.work/uPic/2021/08/01/image-20210801125709535.png" alt="image-20210801125709535"></p><p>总价格：<span style='color:;background:rgb(249,240,242);font-size:文字大小;padding-left:5px;padding-right:5px;'>3899元</span>     </p><p>和配置二 +500元后 4100元相比 。内存频率 2666-》3200 而且便宜200元。</p><p>也是需要单独安装独立显卡和单独买显示器</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;远房表弟中考考了省里最好的高中，正直暑假想配台电脑，列了一份清单。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="硬件" scheme="https://www.dieselchen.work/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    <category term="台式机" scheme="https://www.dieselchen.work/categories/%E7%A1%AC%E4%BB%B6/%E5%8F%B0%E5%BC%8F%E6%9C%BA/"/>
    
    
    <category term="台式电脑" scheme="https://www.dieselchen.work/tags/%E5%8F%B0%E5%BC%8F%E7%94%B5%E8%84%91/"/>
    
    <category term="组装电脑" scheme="https://www.dieselchen.work/tags/%E7%BB%84%E8%A3%85%E7%94%B5%E8%84%91/"/>
    
    <category term="硬件" scheme="https://www.dieselchen.work/tags/%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>git提交了想撤回怎么做？</title>
    <link href="https://www.dieselchen.work/archives/fc0a4be0.html"/>
    <id>https://www.dieselchen.work/archives/fc0a4be0.html</id>
    <published>2021-07-12T09:47:37.000Z</published>
    <updated>2021-07-12T09:50:34.622Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>写完代码后，我们一般这样 git add . //添加所有文件 git commit -m “本功能全部完成”   执行完commit后，想撤回commit，怎么办？</p></blockquote><span id="more"></span><p>写完代码后，我们一般这样</p><p>git add . //添加所有文件</p><p>git commit -m “本功能全部完成”</p><p>执行完commit后，想撤回commit，怎么办？</p><p>这样凉拌：</p><p><strong>git reset –soft HEAD^</strong></p><p>这样就成功的撤销了你的commit</p><p>注意，仅仅是撤回commit操作，您写的代码仍然保留。</p><h2 id="说一下个人理解"><a href="#说一下个人理解" class="headerlink" title="说一下个人理解"></a>说一下个人理解</h2><p>HEAD^的意思是上一个版本，也可以写成HEAD~1</p><p>如果你进行了2次commit，想都撤回，可以使用HEAD~2</p><h2 id="至于这几个参数："><a href="#至于这几个参数：" class="headerlink" title="至于这几个参数："></a>至于这几个参数：</h2><h3 id="–mixed"><a href="#–mixed" class="headerlink" title="–mixed"></a>–mixed</h3><p>意思是：不删除工作空间改动代码，撤销commit，并且撤销git add . 操作</p><p>这个为默认参数,git reset –mixed HEAD^ 和 git reset HEAD^ 效果是一样的。</p><h3 id="–soft"><a href="#–soft" class="headerlink" title="–soft"></a>–soft</h3><p>不删除工作空间改动代码，撤销commit，不撤销git add . </p><h3 id="–hard"><a href="#–hard" class="headerlink" title="–hard"></a>–hard</h3><p>删除工作空间改动代码，撤销commit，撤销git add . </p><p>注意完成这个操作后，就恢复到了上一次的commit状态。</p><h3 id="顺便说一下，如果commit注释写错了，只是想改一下注释，只需要："><a href="#顺便说一下，如果commit注释写错了，只是想改一下注释，只需要：" class="headerlink" title="顺便说一下，如果commit注释写错了，只是想改一下注释，只需要："></a>顺便说一下，如果commit注释写错了，只是想改一下注释，只需要：</h3><p>git commit –amend</p><p>此时会进入默认vim编辑器，修改注释完毕后保存就好了。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;写完代码后，我们一般这样 git add . //添加所有文件 git commit -m “本功能全部完成”   执行完commit后，想撤回commit，怎么办？&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="语言" scheme="https://www.dieselchen.work/categories/%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Git" scheme="https://www.dieselchen.work/categories/%E8%AF%AD%E8%A8%80/Git/"/>
    
    
    <category term="Git" scheme="https://www.dieselchen.work/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>golang精度丢失问题</title>
    <link href="https://www.dieselchen.work/archives/9359d6b3.html"/>
    <id>https://www.dieselchen.work/archives/9359d6b3.html</id>
    <published>2021-05-27T04:11:36.000Z</published>
    <updated>2021-05-27T04:18:07.696Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近fix一个奇怪的bug，这个bug源于是为了解决商品价格在计算的时候因为有小数，在计算的时候由于存在精度丢失所以选择了乘 100 以分单位进行计算。但是在golang中 float64类型的 13.8 ✖️ 100 ！=1380</p></blockquote><span id="more"></span><p>在遇到这个bug之前。我一度以为浮点数的精度丢失问题，在保留2位小数的情况下，乘100变成整数再进行加减计算就不会丢精度，但事实是，乘法本身算出来的数就已经走样了。</p><h3 id="浮点数如何存储的-IEEE-754"><a href="#浮点数如何存储的-IEEE-754" class="headerlink" title="浮点数如何存储的-IEEE-754"></a>浮点数如何存储的-IEEE-754</h3><p>浮点数数据类型主要有：单精度float32、双精度float64</p><p><img src="https://image.dieselchen.work/uPic/2021/05/27/image-20210527115559707.png" alt="image-20210527115559707"></p><p><img src="https://image.dieselchen.work/uPic/2021/05/27/image-20210527115620932.png" alt="image-20210527115620932"></p><p>IEEE-754 标准是一个浮点数标准，存在 32、64、128 bit 三种格式（上面两幅图分别是 32 bit 和 64 bit 的情况，结构是一致的）</p><p>IEEE-754 标准将 64 位分为三部分：</p><ul><li><strong>sign</strong>，1 bit 的标识位，0 为正数，1 为负数</li><li><strong>exponent</strong>，指数，11 bit</li><li><strong>fraction</strong>，小数部分，52 bit</li></ul><h3 id="什么是精度丢失"><a href="#什么是精度丢失" class="headerlink" title="什么是精度丢失"></a>什么是精度丢失</h3><p> 计算机在处理数据都涉及到数据的转换和各种复杂运算，比如，不同单位换算，不同进制（如二进制十进制）换算等，很多除法运算不能除尽，比如10÷3=3.3333…..无穷无尽，而精度是有限的，3.3333333x3并不等于10，经过复杂的处理后得到的十进制数据并不精确，精度越高越精确。float32和float64的精度是由尾数的位数来决定的,其整数部分始终是一个隐含着的“1”，由于它是不变的，故不能对精度造成影响。float32：2^23 = 8388608，一共七位，由于最左为1的一位省略了，这意味着最多能表示8位数：28388608 = 16777216 。有8位有效数字，但绝对能保证的为7位，也即float32的精度为7<del>8位有效数字；float64：2^52 = 4503599627370496，一共16位，同理，float64的精度为16</del>17位。</p><p><strong>所谓的精度丢失就是无限循环小数在计算机怎么存储？计算机再大的内存它也存不下，对吧! 所以不能存储一个相对于数学来说的值，只能存储一个近似值，所以当计算机存储后再取出来用时就会出现精度问题。</strong></p><h3 id="Golang的解决方案"><a href="#Golang的解决方案" class="headerlink" title="Golang的解决方案"></a>Golang的解决方案</h3><p>使用第三方库 decimal</p><p>运行：go get github.com/shopspring/decimal</p><p>在运算开始前，设置你需要的精确的小数位数，自动四舍五入</p><p>decimal.DivisionPrecision = 2 // 保留两位小数，如有更多位，则进行四舍五入保留两位小数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  1.2+3 float和int相加</span></span><br><span class="line"><span class="keyword">var</span> num1 <span class="keyword">float64</span> = <span class="number">1.1</span></span><br><span class="line"><span class="keyword">var</span> num2 <span class="keyword">int</span> = <span class="number">2</span></span><br><span class="line">d1:=decimal.NewFromFloat(num1).Add(decimal.NewFromFloat(<span class="keyword">float64</span>(num2)))</span><br><span class="line"></span><br><span class="line"><span class="comment">//加 Add</span></span><br><span class="line"><span class="comment">//减 Sub</span></span><br><span class="line"><span class="comment">//乘 Mul</span></span><br><span class="line"><span class="comment">//除 Div</span></span><br><span class="line"><span class="comment">//decimal运算得到的结果可以转成自己想要的数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 13.8 *100</span></span><br><span class="line"><span class="keyword">var</span>  priceInt <span class="keyword">int64</span></span><br><span class="line"><span class="keyword">var</span> priceFloat <span class="keyword">float64</span> =<span class="number">13.8</span></span><br><span class="line">price:= decimal.NewFromFloat(priceFloat).Mul(decimal.NewFromInt(<span class="keyword">int64</span>(<span class="number">100</span>))).IntPart()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近fix一个奇怪的bug，这个bug源于是为了解决商品价格在计算的时候因为有小数，在计算的时候由于存在精度丢失所以选择了乘 100 以分单位进行计算。但是在golang中 float64类型的 13.8 ✖️ 100 ！=1380&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="语言" scheme="https://www.dieselchen.work/categories/%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Golang" scheme="https://www.dieselchen.work/categories/%E8%AF%AD%E8%A8%80/Golang/"/>
    
    
    <category term="Golang" scheme="https://www.dieselchen.work/tags/Golang/"/>
    
    <category term="精度丢失" scheme="https://www.dieselchen.work/tags/%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1/"/>
    
  </entry>
  
  <entry>
    <title>使用Gorm遇到的坑</title>
    <link href="https://www.dieselchen.work/archives/3e3fcedd.html"/>
    <id>https://www.dieselchen.work/archives/3e3fcedd.html</id>
    <published>2021-05-07T04:06:19.000Z</published>
    <updated>2021-05-07T04:10:58.158Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>使用Gorm遇到的坑</p></blockquote><span id="more"></span><p>Gorm是用go语言编写的orm框架，它将数据库的结构与语言(golang)本身的数据结构对应了起来，其目的是为了加快我们CRUD的速度，简化sql语句的书写，利用对象的思想，让Gorm框架为我们拼接sql语句。但是在使用过程中有不少的坑还是需要注意一下。</p><h3 id="使用struct更新仅适用于非零值"><a href="#使用struct更新仅适用于非零值" class="headerlink" title="使用struct更新仅适用于非零值"></a>使用struct更新仅适用于非零值</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">user:=User&#123;</span><br><span class="line">Name:<span class="string">&quot;&quot;</span>,</span><br><span class="line">Age:<span class="number">0</span>,</span><br><span class="line">Actived:<span class="literal">false</span>,</span><br><span class="line">&#125;</span><br><span class="line">db.Model(&amp;user).Updates(user)</span><br><span class="line"><span class="comment">//此时不会更新这些零值，如需更新零值使用map</span></span><br><span class="line">userMap:=<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>:<span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;age&quot;</span>:<span class="number">0</span>,</span><br><span class="line">  <span class="string">&quot;actived&quot;</span>:<span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line">db.Model(&amp;user).Updates(userMap)</span><br></pre></td></tr></table></figure><h3 id="Gorm表名尾部自动加s"><a href="#Gorm表名尾部自动加s" class="headerlink" title="Gorm表名尾部自动加s"></a>Gorm表名尾部自动加s</h3><p>Gorm处理数据结构的时候遵循的是首字母规则和驼峰规则。对于结构体User，根据约定，其表名为users。</p><p>这里有两种方式去修改表名：第一种就是去掉这个默认设置；第二种就是在保留默认设置的基础上通过重新设定表名来替换。</p><p>先说如何通过重新设定表名来替换，可以实现 <code>Tabler</code> 接口来更改默认表名，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Tabler <span class="keyword">interface</span> &#123;</span><br><span class="line">TableName() <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// TableName 会将User的表名重写为 `new_user`</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(User)</span> <span class="title">TableName</span><span class="params">()</span><span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;new_user&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以在创建数据库连接的时候，去掉这个默认设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.SingularTable(true)</span><br></pre></td></tr></table></figure><h3 id="错误的使用ErrRecordNotFound"><a href="#错误的使用ErrRecordNotFound" class="headerlink" title="错误的使用ErrRecordNotFound"></a>错误的使用ErrRecordNotFound</h3><p>在我印象中有个错误的认知：如果Gorm没有找到record，则会返回<code>ErrRecordNotFound</code> 的错误，但是在具体使用中并不是这样</p><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  db := gorm.Open(<span class="string">&quot;mysql&quot;</span>,url)</span><br><span class="line">  user := &amp;User&#123;&#125;</span><br><span class="line">  users := <span class="built_in">make</span>([]*User, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">  err := db.Model(user).Where(<span class="string">&quot;id = ?&quot;</span>, <span class="number">1</span>).First(user).Error</span><br><span class="line">  fmt.Println(err, user)</span><br><span class="line"></span><br><span class="line">  err = db.Model(user).Where(<span class="string">&quot;id = ?&quot;</span>, <span class="number">1</span>).Find(&amp;users).Error</span><br><span class="line">  fmt.Println(err, user)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">record not found &amp;&#123;<span class="number">0</span>  &#125;</span><br><span class="line">&lt;<span class="literal">nil</span>&gt; &amp;&#123;<span class="number">0</span>  &#125;</span><br></pre></td></tr></table></figure><h3 id="使用Gorm-Model后无法查询数据"><a href="#使用Gorm-Model后无法查询数据" class="headerlink" title="使用Gorm.Model后无法查询数据"></a>使用Gorm.Model后无法查询数据</h3><ul><li>Scan error on column index 1, name “created_at”: unsupported Scan, storing driver.Value type []uint8</li></ul><p>解决方法：</p><p>打开数据库的时候加上parseTime=true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root:123456@tcp(127.0.0.1:3306)&#x2F;mapdb?charset&#x3D;utf8&amp;parseTime&#x3D;true</span><br></pre></td></tr></table></figure><h3 id="数据库字段映射"><a href="#数据库字段映射" class="headerlink" title="数据库字段映射"></a>数据库字段映射</h3><ul><li>正常的数据库字段映射 user_name 映射为UserName</li><li>带梳子的数据库字段映射 api_ip_1映射为ApiIp_1而非ApiIp1</li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;使用Gorm遇到的坑&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="语言" scheme="https://www.dieselchen.work/categories/%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Golang" scheme="https://www.dieselchen.work/categories/%E8%AF%AD%E8%A8%80/Golang/"/>
    
    
    <category term="Golang" scheme="https://www.dieselchen.work/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>golang原生实现爬虫架构</title>
    <link href="https://www.dieselchen.work/archives/f05bbbc9.html"/>
    <id>https://www.dieselchen.work/archives/f05bbbc9.html</id>
    <published>2021-04-07T08:50:07.000Z</published>
    <updated>2021-04-09T15:13:21.814Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>学习了慕课网 golang爬虫。爬取珍爱网，从单机版–&gt;并发版–&gt;分布式版</p><p>本文对此过程做个总结</p></blockquote><span id="more"></span><h2 id="架构图演进"><a href="#架构图演进" class="headerlink" title="架构图演进"></a>架构图演进</h2><h3 id="单机版爬虫"><a href="#单机版爬虫" class="headerlink" title="单机版爬虫"></a>单机版爬虫</h3><p><img src="https://image.dieselchen.work/uPic/2021/04/09/%E5%8D%95%E6%9C%BA%E7%89%88%20%E7%88%AC%E8%99%AB.png" alt="单机版 爬虫"></p><h3 id="并发版爬虫-简单版调度器"><a href="#并发版爬虫-简单版调度器" class="headerlink" title="并发版爬虫(简单版调度器)"></a>并发版爬虫(简单版调度器)</h3><ul><li>把fetcher和parser封装成worker，输入request，输出requestresult.</li><li>新增scheduler，engine拿到request扔给scheduler。worker的输入输出都是channel</li><li>所有的worker共用一个输入。致命缺点！会产生循环等待</li></ul><p><img src="https://image.dieselchen.work/uPic/2021/04/09/%E5%B9%B6%E5%8F%91%E7%89%88%E7%88%AC%E8%99%AB%EF%BC%88%E7%AE%80%E5%8D%95%E7%89%88%E8%B0%83%E5%BA%A6%E5%99%A8%EF%BC%89.png" alt="并发版爬虫（简单版调度器）"></p><h3 id="并发版爬虫-并发版调度器"><a href="#并发版爬虫-并发版调度器" class="headerlink" title="并发版爬虫(并发版调度器)"></a>并发版爬虫(并发版调度器)</h3><ul><li>engine把request送给scheduler，scheduler给每个request启动一个groutine</li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;学习了慕课网 golang爬虫。爬取珍爱网，从单机版–&amp;gt;并发版–&amp;gt;分布式版&lt;/p&gt;
&lt;p&gt;本文对此过程做个总结&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="语言" scheme="https://www.dieselchen.work/categories/%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Golang" scheme="https://www.dieselchen.work/categories/%E8%AF%AD%E8%A8%80/Golang/"/>
    
    
    <category term="Golang" scheme="https://www.dieselchen.work/tags/Golang/"/>
    
    <category term="爬虫" scheme="https://www.dieselchen.work/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>go源码分析-sync.Pool</title>
    <link href="https://www.dieselchen.work/archives/e7b919d2.html"/>
    <id>https://www.dieselchen.work/archives/e7b919d2.html</id>
    <published>2021-03-30T09:51:22.000Z</published>
    <updated>2021-03-30T10:30:45.543Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>go萌新入门，本文记录一下大佬们的优秀博文，精心研读，日积月累。</p></blockquote><span id="more"></span><h2 id="大佬博文"><a href="#大佬博文" class="headerlink" title="大佬博文"></a>大佬博文</h2><ul><li><a href="https://changkun.us/archives/2018/09/256/">欧神 源码分析</a></li><li><a href="https://reading.hidevops.io/reading/20180817/2018-08-17-sync-pool-reading.pdf">Go 夜读</a></li><li><a href="https://juejin.cn/post/6844903903046320136">源码分析，伪共享</a></li><li><a href="https://zhuanlan.zhihu.com/p/99710992">golang的对象池sync.pool源码解读</a></li><li><a href="https://www.jianshu.com/p/2e08332481c5">sync.Pool 的实现与演进</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;go萌新入门，本文记录一下大佬们的优秀博文，精心研读，日积月累。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="语言" scheme="https://www.dieselchen.work/categories/%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Golang" scheme="https://www.dieselchen.work/categories/%E8%AF%AD%E8%A8%80/Golang/"/>
    
    
    <category term="Golang" scheme="https://www.dieselchen.work/tags/Golang/"/>
    
    <category term="源码分析" scheme="https://www.dieselchen.work/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>记录一下第一次离职</title>
    <link href="https://www.dieselchen.work/archives/25ce9345.html"/>
    <id>https://www.dieselchen.work/archives/25ce9345.html</id>
    <published>2021-03-17T07:43:57.000Z</published>
    <updated>2021-03-17T15:03:50.671Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>20年6月毕业，7月底在上海找到一份工作。总结一下在牛牛成长的收获。在职时间2020-7-31 ～2021-3-17</p></blockquote><span id="more"></span><h3 id="找到第一份工作的激动"><a href="#找到第一份工作的激动" class="headerlink" title="找到第一份工作的激动"></a>找到第一份工作的激动</h3><p>​        毕业了找工作很难，现阶段程序员初级岗很饱和，想找到一份不错的工作还是有难度的。记得当时牛牛成长一面是视频面：文林哥给我面的，说真的当时面的很不好，我简历上写的很夸张，导致很多问题问深了就不会了。当时我记得文林问了一句，你觉得你的优势在哪？我抓住了这个机会说我学习能力很强，我也很想转go开发。可能是因为我当时真的很想进这家公司，在hr问我期望薪资的时候，我压到了6k左右。在二面之前已经拿到一个外包的offer。当时也是很激动，但还好没有去外包。外包是程序员的一生黑，能不去外包尽量不去外包。二面是和磊哥聊的，当时聊的还挺不错的，就斗胆要了7k，谁知当场就拿到了offer。</p><h3 id="第一个月的压力之大"><a href="#第一个月的压力之大" class="headerlink" title="第一个月的压力之大"></a>第一个月的压力之大</h3><p>​        从java转go对我来说挑战挺大的，因为我java学的也不咋样，所以每天回到家里还是会继续熟悉项目、熟悉数据库表的设计、熟悉各种框架。这一个月体重飙升，因为朝10晚7，再加会班，到家基本上10-11点了。再猛吃一顿，对于我这种易胖体质来说简直是灾难。可能是因为压力有点大导致自己的精神面貌可能不是很好，解决一些问题给人的感觉很困难。其实我分析过为啥文林、磊哥对我的评价 那么低，我一直抱着一种被低估的心态参与工作 ，虽说自我感觉是能够在规定时间完成任务，但可能言语之间就暴露了自己的问题。导致我心态发生变化是我打听到两个前端应届生都比我高2k，但实力感觉和我差不多。</p><h3 id="艰难的涨薪"><a href="#艰难的涨薪" class="headerlink" title="艰难的涨薪"></a>艰难的涨薪</h3><p>​        我好像在第三个月就开始提涨薪了，因为自我感觉良好，我做的东西还是很多的。但直接被否定了，可能对我的打击挺大的，不管怎么样我应该在平时的工作中都受到了影响。在任务驱动的环境下，我还是按部就班的完成leader布置的任务。可能问林看到我完成度还不错，跟我说让我转node，给app后端写服务就给我涨薪到 10k，但是当场就被磊哥拦下了，当时诗文已经走了，磊哥想带着我用go去写一些东西，而且想把我们现有的服务用CI、CD的方式部署。说当我完成了就给我涨薪。没过多久文林就走了，从那时候感觉app团队做的东西肯定要凉，磊哥还是继续带领我们做事情。我花了一周的时间完成了CI、CD，紧接着参与了app后端数据提供、用户中心搭建。我在年前看完成度不错又再一次和磊哥提了涨薪，磊哥给予我的是肯定，但也说了我现在还需要继续学，给我推荐了一本书《clean code》、让我 多看看源码。也说了差不多2个月就会给我涨薪。还提醒了我，我们现在的最重要的任务就是完成App的开发。转眼间就快到除夕了。在过年之前我还是把sms短信登陆做完了，可能是照着node写的，当时磊哥直接在群里@我说做的不行，我也进行了反驳，我之前一直找他说怎么设计sms表，一直没给回复，说先把oauth2完成。我也是先给个demo，在群里激辩起来。可能是我做的不对吧，自己才疏学浅，没有达到磊哥的要求。我是真的没想到磊哥年终奖居然给我了不到300。这一下子给我打醒了，这段时间的工作毫无意义，自己的绩效是最差的，我做的所有东西都是无用功 ，没有给公司带来任务的利益。之后……之后磊哥就带领着核心成员投奔了文林，其实这波操作我是真的没想到的。</p><h3 id="学习成长过程"><a href="#学习成长过程" class="headerlink" title="学习成长过程"></a>学习成长过程</h3><p>​        其实我在牛牛成长的这半年内，自己学到的东西还是很多的。比如 linux命令的熟练掌握 、git流程的掌握 、前后端连调、从产品、开发、测试、验收的整体流程等等。具体到项目就是我做了wbs后端leads线索公海、leads状态流转、找教练功能。cms改了很多很多bug，越来越熟悉cms系统，熟悉各种表结构。小程序也做了体能测试等。自己写了很多sql 完成bi报表。也进行了sql优化。explain分析sql。知道了docker、dockerfile、docker-compose、k8s。在磊哥的带领下用 go-zero从0-1起了个新的项目。集成了钉钉的扫码登录 ，自己基于oauth2的标准协议提供了授权接口。总的来说学到了很多、在 大牛们的带领下，我算是入了后端的门了 。</p><h3 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h3><p>​        今天办理了离职、明天就要奔赴新的公司、认识新的同事、在新的环境里工作。我希望自己可以在新的工作环境中提高自己的工作效率，和同事们处好关系，保持一个积极向上的乐观心态。一步一个脚印，加油！</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;20年6月毕业，7月底在上海找到一份工作。总结一下在牛牛成长的收获。在职时间2020-7-31 ～2021-3-17&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="成长与收获" scheme="https://www.dieselchen.work/categories/%E6%88%90%E9%95%BF%E4%B8%8E%E6%94%B6%E8%8E%B7/"/>
    
    <category term="离职" scheme="https://www.dieselchen.work/categories/%E6%88%90%E9%95%BF%E4%B8%8E%E6%94%B6%E8%8E%B7/%E7%A6%BB%E8%81%8C/"/>
    
    
    <category term="牛牛成长" scheme="https://www.dieselchen.work/tags/%E7%89%9B%E7%89%9B%E6%88%90%E9%95%BF/"/>
    
    <category term="离职" scheme="https://www.dieselchen.work/tags/%E7%A6%BB%E8%81%8C/"/>
    
    <category term="跳槽" scheme="https://www.dieselchen.work/tags/%E8%B7%B3%E6%A7%BD/"/>
    
  </entry>
  
  <entry>
    <title>golang学习笔记</title>
    <link href="https://www.dieselchen.work/archives/f20814c0.html"/>
    <id>https://www.dieselchen.work/archives/f20814c0.html</id>
    <published>2021-03-17T04:25:17.000Z</published>
    <updated>2021-03-17T15:17:29.521Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>golang一些用法记录一下（持续更新）</p></blockquote><span id="more"></span><h2 id="golang中截取字符串"><a href="#golang中截取字符串" class="headerlink" title="golang中截取字符串"></a>golang中截取字符串</h2><h3 id="截取普通英文字符串"><a href="#截取普通英文字符串" class="headerlink" title="截取普通英文字符串"></a>截取普通英文字符串</h3><p>当你需要截取字符串中的一部分时，可以使用像截取数组某部分那样来操作</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="string">&quot;GoXHelloWorldX&quot;</span></span><br><span class="line">content:=s[<span class="number">3</span>:<span class="built_in">len</span>(s)<span class="number">-1</span>]</span><br><span class="line">fmt.Println(content)</span><br></pre></td></tr></table></figure><p>运行结果为： HelloWorld</p><h3 id="截取带中文字符串"><a href="#截取带中文字符串" class="headerlink" title="截取带中文字符串"></a>截取带中文字符串</h3><p>一个中文字符肯定不止一个字节，难道我还得遍历每个字节，判断编码，那也太麻烦了吧。我们不需要考虑那么多，除了byte还有另外一个类型rune，使用它完全不用考虑unicode字节问题，一个中文就只占一个数组下标</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s:=<span class="string">&quot;我He你好吗？&quot;</span></span><br><span class="line">content:=[]<span class="keyword">rune</span>(s)[<span class="number">3</span>:]</span><br><span class="line">fmt.Println(content)</span><br></pre></td></tr></table></figure><p>运行结果：你好吗？</p><h2 id="golang-string-和int-转换"><a href="#golang-string-和int-转换" class="headerlink" title="golang string 和int 转换"></a>golang string 和int 转换</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//string转成int：</span></span><br><span class="line"><span class="keyword">int</span>, err := strconv.Atoi(<span class="keyword">string</span>)</span><br><span class="line"><span class="comment">//string转成int64：</span></span><br><span class="line"><span class="keyword">int64</span>, err := strconv.ParseInt(<span class="keyword">string</span>, <span class="number">10</span>, <span class="number">64</span>)</span><br><span class="line"><span class="comment">//int转成string：</span></span><br><span class="line"><span class="keyword">string</span> := strconv.Itoa(<span class="keyword">int</span>)</span><br><span class="line"><span class="comment">//int64转成string：</span></span><br><span class="line"><span class="keyword">string</span> := strconv.FormatInt(<span class="keyword">int64</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;golang一些用法记录一下（持续更新）&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="语言" scheme="https://www.dieselchen.work/categories/%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Golang" scheme="https://www.dieselchen.work/categories/%E8%AF%AD%E8%A8%80/Golang/"/>
    
    
    <category term="Golang" scheme="https://www.dieselchen.work/tags/Golang/"/>
    
    <category term="学习笔记" scheme="https://www.dieselchen.work/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>牛牛App登陆过程</title>
    <link href="https://www.dieselchen.work/archives/7474afea.html"/>
    <id>https://www.dieselchen.work/archives/7474afea.html</id>
    <published>2021-03-17T03:24:37.000Z</published>
    <updated>2021-03-17T03:44:21.149Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>牛牛成长直播app搭建用户中心</p></blockquote><span id="more"></span><p>牛牛APP登录全流程</p><p>当前流程如下</p><p><img src="https://image.dieselchen.work/uPic/2021/03/17/image-20210317113919021.png" alt="image-20210317113919021"></p><h1 id="验证码登录过程描述"><a href="#验证码登录过程描述" class="headerlink" title="验证码登录过程描述"></a>验证码登录过程描述</h1><h2 id="请求发送验证码"><a href="#请求发送验证码" class="headerlink" title="请求发送验证码"></a>请求发送验证码</h2><ol><li>查找 <a href="https://e1z7tg61mh.feishu.cn/docs/doccncpydiPIcsDoT4pktxBsdof#ngf20O">sms_codes</a> 记录，是否存在手机号相同且未过期的验证码。如不存在，新建记录；如存在，更新验证码的过期时间。</li><li>追加相关的设备信息。</li><li>检查 <strong>手机号</strong> 与 <strong>国家区号</strong> 发送次数是否被限制，否则直接返回失败。错误码 <a href="https://e1z7tg61mh.feishu.cn/docs/doccncpydiPIcsDoT4pktxBsdof#toyMPx">403</a></li><li>检查腾讯云短信服务是否发送成功，否则直接返回失败。错误码 <a href="https://e1z7tg61mh.feishu.cn/docs/doccncpydiPIcsDoT4pktxBsdof#toyMPx">503</a></li><li>发送成功</li></ol><h2 id="验证发送的验证码"><a href="#验证发送的验证码" class="headerlink" title="验证发送的验证码"></a>验证发送的验证码</h2><ol><li>正则匹配 code 是否通过，否则直接返回失败。错误码 <a href="https://e1z7tg61mh.feishu.cn/docs/doccncpydiPIcsDoT4pktxBsdof#toyMPx">403</a></li><li>查找 <a href="https://e1z7tg61mh.feishu.cn/docs/doccncpydiPIcsDoT4pktxBsdof#ngf20O">sms_codes</a> 存在未验证的短信验证码，否则直接返回失败。错误码 <a href="https://e1z7tg61mh.feishu.cn/docs/doccncpydiPIcsDoT4pktxBsdof#toyMPx">404</a></li><li>通过 <strong>手机号</strong> 与 <strong>国家区号</strong> 查找用户，如果查找不到完成自动注册</li><li>生成 tshn 的 access_token</li><li>验证成功</li></ol><h1 id="OAuth-登录鉴权过程"><a href="#OAuth-登录鉴权过程" class="headerlink" title="OAuth 登录鉴权过程"></a>OAuth 登录鉴权过程</h1><h2 id="请求OAuth2授权码"><a href="#请求OAuth2授权码" class="headerlink" title="请求OAuth2授权码"></a>请求OAuth2授权码</h2><table><thead><tr><th>接口地址</th><th>GET /oauth/authorize</th><th></th></tr></thead><tbody><tr><td>请求参数</td><td>client_id</td><td>客户端标识，如 “nnapp-student”</td></tr><tr><td></td><td>response_type</td><td>这里按照规范约定值为 “code”</td></tr><tr><td></td><td>redirect_uri</td><td>请求成功后的回调地址，例如 <a href="https://example.com/oauth/callback">https://example.com/oauth/callback</a></td></tr><tr><td></td><td>state</td><td>规范中约定的防止 CSRF 的值，通常为随机字符串</td></tr><tr><td>请求头</td><td>Authorization</td><td>tshn 专用的 access token</td></tr><tr><td></td><td>x-user-id</td><td>用户在 tshn 中 userid</td></tr><tr><td>返回结果</td><td>重定向到 redirect_uri 参数指定的地址</td><td>在本例中，会返回重定向请求到 <a href="https://example.com/oauth/callback?code=xxxx&amp;state=xx">https://example.com/oauth/callback?code=xxxx&amp;state=xx</a> 其中 code 为后续换取 access token 所用的临时验证码</td></tr></tbody></table><h2 id="换取Access-Token"><a href="#换取Access-Token" class="headerlink" title="换取Access Token"></a>换取Access Token</h2><table><thead><tr><th>接口地址</th><th>POST /oauth/token</th><th></th></tr></thead><tbody><tr><td>请求参数</td><td>code</td><td>用于换取 access code 的验证码，由上一个接口返回，例如 “xxxx”</td></tr><tr><td></td><td>grant_type</td><td>按照规范约定，此处为 “authorization_code”</td></tr><tr><td></td><td>client_id</td><td>用于表明客户端身份的标识，如 “nncz-student”</td></tr><tr><td></td><td>client_secret</td><td>客户端 client_id 对应的密钥</td></tr><tr><td>请求头</td><td>Authorization</td><td>tshn 专用的 access token</td></tr><tr><td></td><td>x-user-id</td><td>用户在 tshn 中 userid</td></tr><tr><td>返回结果</td><td>一个 JSON object</td><td>{  “access_token”: “”,  “token_type: “Bearer”,  “expires_at”: “unix timestamp”,  “role”: “coach”, //  “scope”: …,  “refresh_token”: … }</td></tr></tbody></table><h2 id="刷新Access-Token"><a href="#刷新Access-Token" class="headerlink" title="刷新Access Token"></a>刷新Access Token</h2><table><thead><tr><th>接口地址</th><th>POST /oauth/token</th><th></th></tr></thead><tbody><tr><td>请求参数</td><td>refresh_token</td><td>refresh_token</td></tr><tr><td></td><td>grant_type</td><td>按照规范约定，此处为 “refresh_token”</td></tr><tr><td></td><td>client_id</td><td>用于表明客户端身份的标识，如 “nncz-student”</td></tr><tr><td></td><td>client_secret</td><td>客户端 client_id 对应的密钥</td></tr><tr><td>请求头</td><td>Authorization</td><td>tshn 专用的 access token</td></tr><tr><td></td><td>x-user-id</td><td>用户在 tshn 中 userid</td></tr><tr><td>返回结果</td><td>一个 JSON object</td><td>{  “access_token”: “”,  “token_type: “Bearer”,  “expires_at”: “unix timestamp”,  “role”: “coach”, //  “scope”: …,  “refresh_token”: … }</td></tr></tbody></table><h1 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h1><h2 id="SMS-接口"><a href="#SMS-接口" class="headerlink" title="SMS 接口"></a>SMS 接口</h2><h3 id="发送验证码"><a href="#发送验证码" class="headerlink" title="发送验证码"></a>发送验证码</h3><table><thead><tr><th>请求路径</th><th>/sms/send</th></tr></thead><tbody><tr><td>请求方法</td><td>POST</td></tr><tr><td>请求头</td><td>content-type: application/x-www-form-urlencoded</td></tr><tr><td>请求参数</td><td>phone=17671773306&amp;country_code=86&amp;unique_id=xxx&amp;device_id=iPhone13%2C4&amp;mac_address=xxx&amp;ip_address=127.0.0.1</td></tr><tr><td>返回</td><td>Status=200 {“message”: “发送成功”}</td></tr><tr><td>错误码error</td><td><a href="https://e1z7tg61mh.feishu.cn/docs/doccncpydiPIcsDoT4pktxBsdof#toyMPx">牛牛APP登录全流程</a></td></tr></tbody></table><h3 id="检查验证码"><a href="#检查验证码" class="headerlink" title="检查验证码"></a>检查验证码</h3><table><thead><tr><th>请求路径</th><th>/sms/verify</th></tr></thead><tbody><tr><td>请求方法</td><td>POST</td></tr><tr><td>请求头</td><td>content-type: application/x-www-form-urlencoded</td></tr><tr><td>请求参数</td><td>phone=17671773306&amp;country_code=86&amp;code=9999</td></tr><tr><td>返回</td><td>Status=200 {“tshn_access_token”:token,”user_id”:1000000} tshn 用 token（通过 jwt 方式加密），token 的内容包含 {  userId: … // 学生 id 从 100 0000 开始  role: … // 可能值为 coach, student  exp: … // timestamp   iat: ..//timestamp } Status!=200  {    “error”: “invalid-code-error”,    “error_description”: “验证码没有通过正则匹配” }</td></tr><tr><td>错误码error</td><td><a href="https://e1z7tg61mh.feishu.cn/docs/doccncpydiPIcsDoT4pktxBsdof#toyMPx">牛牛APP登录全流程</a></td></tr></tbody></table><h3 id="错误码"><a href="#错误码" class="headerlink" title="错误码"></a>错误码</h3><table><thead><tr><th><strong>error</strong></th><th><strong>message</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>100</td><td>action_not_found</td><td>操作的方法不存在</td></tr><tr><td>403</td><td>send-restricted</td><td>该手机号发送次数受到限制</td></tr><tr><td>403</td><td>invalid-code-error</td><td>验证码没有通过正则匹配  regex: <strong>/^\d{4}$/</strong></td></tr><tr><td>404</td><td>code-not-found</td><td>没有查询到匹配的验证码</td></tr><tr><td>500</td><td>find-user-error</td><td>没有查询到该手机号绑定的用户（自动注册功能完成后该错误失效）</td></tr><tr><td>503</td><td>send-fail-error</td><td>短信发送失败了（腾讯云短信服务）</td></tr><tr><td>999</td><td>incomplete_device_info</td><td>没有设备信息</td></tr></tbody></table><h2 id="OAuth-接口"><a href="#OAuth-接口" class="headerlink" title="OAuth 接口"></a>OAuth 接口</h2><h3 id="获取授权"><a href="#获取授权" class="headerlink" title="获取授权"></a>获取授权</h3><h3 id="获取-AccessToken"><a href="#获取-AccessToken" class="headerlink" title="获取 AccessToken"></a>获取 AccessToken</h3><h3 id="请求业务接口"><a href="#请求业务接口" class="headerlink" title="请求业务接口"></a>请求业务接口</h3><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="SMS-相关表结构"><a href="#SMS-相关表结构" class="headerlink" title="SMS 相关表结构"></a>SMS 相关表结构</h2><h3 id="sms-code-包含gorm-Model"><a href="#sms-code-包含gorm-Model" class="headerlink" title="sms_code(包含gorm.Model)"></a>sms_code(包含gorm.Model)</h3><table><thead><tr><th>属性</th><th>类型</th><th>备注</th></tr></thead><tbody><tr><td>phone</td><td>varchar(30)</td><td>手机号，如：131012345678</td></tr><tr><td>country_code</td><td>varchar(10)</td><td>地区号，如 86，与手机号一同构成唯一标识</td></tr><tr><td>expire_at</td><td>timestamp</td><td>“2020-01-01 13:05:39”，表示这个 code 的过期时间</td></tr><tr><td>code</td><td>String</td><td>四位数字，例如 9527</td></tr><tr><td>verified</td><td>tinyint</td><td>默认为 0，当通过 /verify API 验证过以后会设置为 1</td></tr></tbody></table><h3 id="sms-client-包含gorm-Model"><a href="#sms-client-包含gorm-Model" class="headerlink" title="sms_client(包含gorm.Model)"></a>sms_client(包含gorm.Model)</h3><table><thead><tr><th>属性</th><th>类型</th><th>备注</th></tr></thead><tbody><tr><td>sms_code_id</td><td>int</td><td>sms_code_id    sms_code的主键</td></tr><tr><td>device_id</td><td>varchar(100)</td><td>设备ID</td></tr><tr><td>mac_address</td><td>varchar(100)</td><td>设备网卡的mac地址(ios7之后无法检索出)</td></tr><tr><td>unique_id</td><td>varchar(255)</td><td>设备唯一标识</td></tr><tr><td>ip_address</td><td>varchar(50)</td><td>设备网卡分配的ip地址</td></tr></tbody></table><p><img src="https://image.dieselchen.work/uPic/2021/03/17/image-20210317114229778.png" alt="image-20210317114229778"></p><h2 id="OAuth-相关表结构-（tshn-的数据库中）"><a href="#OAuth-相关表结构-（tshn-的数据库中）" class="headerlink" title="OAuth 相关表结构 （tshn 的数据库中）"></a>OAuth 相关表结构 （tshn 的数据库中）</h2><h3 id="oauth-client-包含gorm-Model"><a href="#oauth-client-包含gorm-Model" class="headerlink" title="oauth_client(包含gorm.Model)"></a>oauth_client(包含gorm.Model)</h3><table><thead><tr><th>client_id</th><th>varchar(255)</th><th>发起对资源请求的客户端标识符，对应 /oauth/authorize 请求中的 client_id。客户端是指 手机端 app，或者小程序，等。</th></tr></thead><tbody><tr><td>client_secret</td><td>varchar(255)</td><td>对应请求中的参数 client_secret</td></tr><tr><td>redirect_uri</td><td>varchar(255)</td><td>重定向地址    “<a href="https://chat3.nncz.cn/oauth/callback&quot;">https://chat3.nncz.cn/oauth/callback&quot;</a></td></tr><tr><td>data</td><td>json</td><td>clientInfo Json存储信息</td></tr></tbody></table><h3 id="oauth-token-包含gorm-Model"><a href="#oauth-token-包含gorm-Model" class="headerlink" title="oauth_token(包含gorm.Model)"></a>oauth_token(包含gorm.Model)</h3><table><thead><tr><th>code</th><th>varchar(255)</th><th>授权码 authorization_code</th></tr></thead><tbody><tr><td>access</td><td>varchar(255)</td><td>access_token</td></tr><tr><td>refresh</td><td>varchar(255)</td><td>refresh_token</td></tr><tr><td>expire_at</td><td>timestamp</td><td>refresh过期时间</td></tr><tr><td>data</td><td>json</td><td>tokenInfo Json存储信息</td></tr></tbody></table><h2 id="短信配置"><a href="#短信配置" class="headerlink" title="短信配置"></a>短信配置</h2><table><thead><tr><th>常量名称</th><th>描述</th></tr></thead><tbody><tr><td>secretId</td><td>腾讯云Apikey的id</td></tr><tr><td>secretKey</td><td>腾讯云Apikey的key</td></tr><tr><td>smsAppId</td><td>短信服务的项目appId</td></tr><tr><td>smsSign</td><td>短信签名</td></tr><tr><td>smsTemplateID</td><td>短信模版id</td></tr></tbody></table><h2 id="登录配置"><a href="#登录配置" class="headerlink" title="登录配置"></a>登录配置</h2><table><thead><tr><th>code</th><th>有效期时长，默认 5分钟</th></tr></thead><tbody><tr><td>access_token</td><td>有效期，默认 6 小时</td></tr><tr><td>refresh_token</td><td>刷新token，默认 30 天</td></tr></tbody></table><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/89020647">OAuth 2.0 详解</a></li><li><a href="http://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html">OAuth 2.0 的四种方式</a>（阮一峰的博客）</li><li>oauth2-server 的<a href="https://oauth2-server.readthedocs.io/">开发文档</a></li><li><a href="https://tools.ietf.org/html/rfc6749.html">RFC 6749</a></li><li><a href="https://www.oauth.com/playground/">OAuth Playground</a></li><li><a href="https://console.cloud.tencent.com/api/explorer?Product=sms">QCloud API Explorer(短信)</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;牛牛成长直播app搭建用户中心&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="架构设计" scheme="https://www.dieselchen.work/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="技术文档" scheme="https://www.dieselchen.work/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="登陆" scheme="https://www.dieselchen.work/tags/%E7%99%BB%E9%99%86/"/>
    
    <category term="用户中心" scheme="https://www.dieselchen.work/tags/%E7%94%A8%E6%88%B7%E4%B8%AD%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>集成钉钉扫码登陆</title>
    <link href="https://www.dieselchen.work/archives/d3f55236.html"/>
    <id>https://www.dieselchen.work/archives/d3f55236.html</id>
    <published>2021-03-17T03:08:47.000Z</published>
    <updated>2021-03-17T03:44:21.150Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>集成钉钉扫码登录的时序图</p></blockquote><span id="more"></span><p>已在钉钉创建登录应用 (<a href="https://open-dev.dingtalk.com/">https://open-dev.dingtalk.com</a>)</p><table><thead><tr><th>名称</th><th>OAuth 系统集成</th></tr></thead><tbody><tr><td>描述</td><td>用于企业内部系统的登录</td></tr><tr><td>LOGO 地址</td><td><a href="https://nnemp-product-1254101407.cos.ap-shanghai.myqcloud.com/logo/logo1.png">https://nnemp-product-1254101407.cos.ap-shanghai.myqcloud.com/logo/logo1.png</a></td></tr><tr><td>回调地址</td><td><a href="https://oauth.nncz.cn/dingtalk/callback">https://oauth.nncz.cn/dingtalk/callback</a></td></tr><tr><td>appId</td><td>*<strong>**</strong></td></tr><tr><td>appSecret</td><td>*<strong>**</strong></td></tr></tbody></table><ol><li>扫码成功以后返回 loginTmpCode</li><li>浏览器发送请求到 goto 参数指定的地址</li><li>通过这个地址生成 jwt token 并返回给浏览器</li></ol><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><p><img src="https://image.dieselchen.work/uPic/2021%2003%2017%20image-20210317110406824%20.png" alt="image-20210317110406824"></p><h2 id="staff表结构"><a href="#staff表结构" class="headerlink" title="staff表结构"></a>staff表结构</h2><table><thead><tr><th>属性</th><th>类型</th><th align="center">备注</th></tr></thead><tbody><tr><td>id</td><td>Uint</td><td align="center">主键自增</td></tr><tr><td>unionid</td><td>String</td><td align="center">用户在当前开放应用所属企业的唯一标识</td></tr><tr><td>openid</td><td>String</td><td align="center">用户在当前开放应用内的唯一标识</td></tr><tr><td>dingid</td><td>String</td><td align="center">钉钉id</td></tr><tr><td>nickname</td><td>String</td><td align="center">用户在钉钉上面的昵称</td></tr><tr><td>created_at</td><td>Date</td><td align="center">记录创建时间</td></tr><tr><td>updated_at</td><td>Date</td><td align="center">记录更新时间</td></tr><tr><td>deleted_at</td><td>Date</td><td align="center">记录删除时间</td></tr></tbody></table><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://developers.dingtalk.com/document/app">钉钉开发者文档</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;集成钉钉扫码登录的时序图&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="架构设计" scheme="https://www.dieselchen.work/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="技术文档" scheme="https://www.dieselchen.work/categories/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="钉钉" scheme="https://www.dieselchen.work/tags/%E9%92%89%E9%92%89/"/>
    
    <category term="扫码登录" scheme="https://www.dieselchen.work/tags/%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95/"/>
    
    <category term="技术文档" scheme="https://www.dieselchen.work/tags/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>go语言的并发模型GPM</title>
    <link href="https://www.dieselchen.work/archives/c5d273ba.html"/>
    <id>https://www.dieselchen.work/archives/c5d273ba.html</id>
    <published>2021-03-09T03:05:30.000Z</published>
    <updated>2021-03-17T03:44:21.146Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>go语言并发模型 GPM的解释</p></blockquote><span id="more"></span><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://learnku.com/articles/41728">Golang 调度器 GMP 原理与调度全分析</a></li><li><a href="https://www.golangroadmap.com/class/goadvanced/3-4.html#_2-3-runqueue%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%88%90">go语言并发模型</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;go语言并发模型 GPM的解释&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="语言" scheme="https://www.dieselchen.work/categories/%E8%AF%AD%E8%A8%80/"/>
    
    <category term="Golang" scheme="https://www.dieselchen.work/categories/%E8%AF%AD%E8%A8%80/Golang/"/>
    
    
    <category term="Golang" scheme="https://www.dieselchen.work/tags/Golang/"/>
    
    <category term="并发模型" scheme="https://www.dieselchen.work/tags/%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/"/>
    
    <category term="Goroutine" scheme="https://www.dieselchen.work/tags/Goroutine/"/>
    
  </entry>
  
</feed>
